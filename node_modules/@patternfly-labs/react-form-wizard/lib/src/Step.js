import { jsx as _jsx } from "react/jsx-runtime";
import { Split, SplitItem } from '@patternfly/react-core';
import { Fragment, useLayoutEffect } from 'react';
import { DisplayMode, useDisplayMode } from './contexts/DisplayModeContext';
import { useHasInputs } from './contexts/HasInputsProvider';
import { useShowValidation } from './contexts/ShowValidationProvider';
import { useSetStepHasInputs } from './contexts/StepHasInputsProvider';
import { useSetStepHasValidationError } from './contexts/StepValidationProvider';
import { useHasValidationError } from './contexts/ValidationProvider';
import { useInputHidden } from './inputs/Input';
export function Step(props) {
    const hasValidationError = useHasValidationError();
    const setStepHasValidationError = useSetStepHasValidationError();
    const hasInputs = useHasInputs();
    const setStepHasInputs = useSetStepHasInputs();
    const showValidation = useShowValidation();
    const displayMode = useDisplayMode();
    useLayoutEffect(() => {
        if (displayMode !== DisplayMode.Details)
            setStepHasValidationError(props.id, hasValidationError && showValidation);
    }, [hasValidationError, displayMode, props.id, setStepHasValidationError, showValidation]);
    useLayoutEffect(() => {
        if (displayMode !== DisplayMode.Details)
            setStepHasInputs(props.id, hasInputs);
    }, [hasInputs, displayMode, props.id, setStepHasInputs]);
    const hidden = useInputHidden(props);
    if (hidden && props.autohide !== false)
        return _jsx(Fragment, {}, void 0);
    if (displayMode == DisplayMode.Steps) {
        const classname = 'pf-c-wizard__nav-link';
        return (_jsx("li", { className: "pf-c-wizard__nav-item", children: _jsx("button", { id: `${props.id}-button`, className: classname, children: _jsx(Split, { children: _jsx(SplitItem, { isFilled: true, children: props.label }, void 0) }, void 0) }, void 0) }, props.id));
    }
    return _jsx(Fragment, { children: props.children }, void 0);
}
//# sourceMappingURL=Step.js.map
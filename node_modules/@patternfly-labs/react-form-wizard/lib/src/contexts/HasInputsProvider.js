import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, useCallback, useContext, useLayoutEffect, useState } from 'react';
const SetHasInputsContext = createContext(() => null);
export const useSetHasInputs = () => useContext(SetHasInputsContext);
export const HasInputsContext = createContext(false);
export const useHasInputs = () => useContext(HasInputsContext);
const UpdateHasInputsContext = createContext(() => null);
export const useUpdateHasInputs = () => useContext(UpdateHasInputsContext);
export function HasInputsProvider(props) {
    const [hasInputs, setHasInputsState] = useState(false);
    const [setHasInputs, setHasInputsFunction] = useState(() => () => setHasInputsState(true));
    const validate = useCallback(() => {
        setHasInputsState(false);
        setHasInputsFunction(() => () => setHasInputsState(true));
    }, []);
    useLayoutEffect(() => validate(), [validate]);
    const parentUpdateHasInputs = useContext(UpdateHasInputsContext);
    useLayoutEffect(() => {
        if (!hasInputs)
            parentUpdateHasInputs?.();
    }, [parentUpdateHasInputs, hasInputs]);
    useLayoutEffect(() => () => {
        if (parentUpdateHasInputs)
            parentUpdateHasInputs();
    }, [parentUpdateHasInputs]);
    const parentSetHasInputs = useContext(SetHasInputsContext);
    useLayoutEffect(() => {
        if (hasInputs)
            parentSetHasInputs?.();
    }, [parentSetHasInputs, hasInputs]);
    return (_jsx(UpdateHasInputsContext.Provider, { value: validate, children: _jsx(SetHasInputsContext.Provider, { value: setHasInputs, children: _jsx(HasInputsContext.Provider, { value: hasInputs, children: props.children }, void 0) }, void 0) }, void 0));
}
//# sourceMappingURL=HasInputsProvider.js.map
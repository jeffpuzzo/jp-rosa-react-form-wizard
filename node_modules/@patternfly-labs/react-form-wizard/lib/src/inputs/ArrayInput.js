import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button, Divider, Dropdown, DropdownItem, DropdownToggle, FormFieldGroupHeader, List, ListItem, Split, SplitItem, Text, Title, } from '@patternfly/react-core';
import { ArrowDownIcon, ArrowUpIcon, CaretDownIcon, ExclamationCircleIcon, PlusIcon, TrashIcon } from '@patternfly/react-icons';
import get from 'get-value';
import { Children, Fragment, useCallback, useContext, useState } from 'react';
import { TextDetail } from '..';
import { FieldGroup } from '../components/FieldGroup';
import { Indented } from '../components/Indented';
import { LabelHelp } from '../components/LabelHelp';
import { useData } from '../contexts/DataContext';
import { DisplayMode } from '../contexts/DisplayModeContext';
import { ItemContext } from '../contexts/ItemContext';
import { ShowValidationContext } from '../contexts/ShowValidationProvider';
import { HasValidationErrorContext, ValidationProvider } from '../contexts/ValidationProvider';
import './ArrayInput.css';
import { useInput } from './Input';
export function wizardArrayItems(props, item) {
    const id = props.id;
    const path = props.path !== undefined ? props.path : id;
    let sourceArray = get(item, path);
    if (!Array.isArray(sourceArray))
        sourceArray = [];
    let values = sourceArray;
    if (props.filter)
        values = values.filter(props.filter);
    return values;
}
export function ArrayInput(props) {
    const { displayMode: mode, value, setValue, hidden, id } = useInput(props);
    const path = props.path;
    const { update } = useData();
    const item = useContext(ItemContext);
    const values = wizardArrayItems(props, item);
    const addItem = useCallback((newItem) => {
        if (path === null) {
            ;
            item.push(newItem);
        }
        else {
            let newArray = values;
            if (Array.isArray(newItem)) {
                newArray = [...newArray, ...newItem];
            }
            else {
                newArray.push(newItem);
            }
            setValue(newArray);
        }
        update();
    }, [item, path, setValue, update, values]);
    const removeItem = useCallback((item) => {
        const index = value.indexOf(item);
        if (index !== -1) {
            ;
            value.splice(index, 1);
            setValue(value);
        }
    }, [setValue, value]);
    const moveUp = useCallback((index) => {
        const temp = value[index];
        value[index] = value[index - 1];
        value[index - 1] = temp;
        setValue(value);
    }, [setValue, value]);
    const moveDown = useCallback((index) => {
        const temp = value[index];
        value[index] = value[index + 1];
        value[index + 1] = temp;
        setValue(value);
    }, [setValue, value]);
    if (hidden)
        return _jsx(Fragment, {}, void 0);
    if (mode === DisplayMode.Details) {
        if (values.length === 0) {
            return _jsx(Fragment, {}, void 0);
        }
        if (props.isSection) {
            return (_jsxs(Fragment, { children: [_jsx(Title, { headingLevel: "h2", children: props.label }, void 0), _jsx(Indented, { id: id, children: _jsx(List, { style: { marginTop: -4 }, isPlain: props.summaryList !== true, children: values.map((value, index) => (_jsx(ListItem, { style: { paddingBottom: 4 }, children: _jsx(ItemContext.Provider, { value: value, children: typeof props.collapsedContent === 'string' ? (_jsx(TextDetail, { id: props.collapsedContent, path: props.collapsedContent, placeholder: props.collapsedPlaceholder }, void 0)) : (props.collapsedContent) }, void 0) }, index))) }, void 0) }, void 0)] }, void 0));
        }
        return (_jsxs(Fragment, { children: [_jsx("div", { className: "pf-c-description-list__term", children: props.label }, void 0), _jsx(Indented, { id: id, children: _jsx(List, { style: { marginTop: -4 }, isPlain: props.summaryList !== true, children: values.map((value, index) => (_jsx(ListItem, { style: { paddingBottom: 4 }, children: _jsx(ItemContext.Provider, { value: value, children: typeof props.collapsedContent === 'string' ? (_jsx(TextDetail, { id: props.collapsedContent, path: props.collapsedContent, placeholder: props.collapsedPlaceholder }, void 0)) : (props.collapsedContent) }, void 0) }, index))) }, void 0) }, void 0)] }, void 0));
    }
    return (_jsxs("div", { id: id, className: "form-wizard-array-input", children: [props.label && (_jsxs("div", { style: { paddingBottom: 8, paddingTop: 0 }, children: [props.isSection ? (_jsxs(Split, { hasGutter: true, style: { paddingBottom: 8 }, children: [_jsx("span", { className: "pf-c-form__section-title", children: props.label }, void 0), props.labelHelp && _jsx(LabelHelp, { id: id, labelHelp: props.labelHelp, labelHelpTitle: props.labelHelpTitle }, void 0)] }, void 0)) : (_jsxs("div", { children: [_jsx("span", { className: "pf-c-form__label pf-c-form__label-text", children: props.label }, void 0), props.labelHelp && _jsx(LabelHelp, { id: id, labelHelp: props.labelHelp, labelHelpTitle: props.labelHelpTitle }, void 0)] }, void 0)), props.helperText && _jsx(Text, { component: "small", children: props.helperText }, void 0)] }, void 0)), values.length === 0 ? (_jsx(Divider, {}, void 0)) : (values.map((value, index) => {
                return (_jsx(ArrayInputItem, { id: id, value: value, index: index, count: values.length, collapsedContent: props.collapsedContent, collapsedPlaceholder: props.collapsedPlaceholder, sortable: props.sortable, moveUp: moveUp, moveDown: moveDown, removeItem: removeItem, defaultExpanded: !props.defaultCollapsed, children: props.children }, index));
            })), _jsx("div", { style: { display: 'flex', alignItems: 'baseline', gap: 8, paddingTop: values.length ? 8 : 4 }, children: !props.dropdownItems ? (_jsxs(Button, { id: "add-button", variant: "link", isSmall: true, "aria-label": "Action", onClick: () => addItem(props.newValue ?? {}), children: [_jsx(PlusIcon, {}, void 0), " \u00A0 ", props.placeholder] }, void 0)) : (_jsx(Dropdown2, { placeholder: props.placeholder, children: props.dropdownItems.map((item, index) => {
                        return (_jsx(DropdownItem, { onClick: () => addItem(item.action()), children: item.label }, index));
                    }) }, void 0)) }, void 0)] }, void 0));
}
export function ArrayInputItem(props) {
    const { id, value, index, defaultExpanded, moveUp, moveDown, removeItem } = props;
    const [expanded, setExpanded] = useState(defaultExpanded !== undefined ? defaultExpanded : true);
    return (_jsx(ValidationProvider, { children: _jsx(ShowValidationContext.Consumer, { children: (showValidation) => (_jsx(HasValidationErrorContext.Consumer, { children: (hasErrors) => (_jsx(ItemContext.Provider, { value: value, children: _jsx(FieldGroup, { id: id + '-' + (index + 1).toString(), isExpanded: expanded, setIsExpanded: setExpanded, toggleAriaLabel: "Details", header: _jsx(FormFieldGroupHeader, { titleText: {
                                text: showValidation && hasErrors ? (_jsxs(Split, { children: [_jsx(SplitItem, { children: _jsx(ExclamationCircleIcon, { color: "var(--pf-global--danger-color--100)" }, void 0) }, void 0), _jsx(SplitItem, { children: _jsx("span", { className: "pf-c-form__helper-text pf-m-error", children: "\u00A0 Expand to fix validation errors" }, void 0) }, void 0)] }, void 0)) : (_jsx(Fragment, { children: typeof props.collapsedContent === 'string' ? (_jsx(TextDetail, { id: props.collapsedContent, path: props.collapsedContent, placeholder: props.collapsedPlaceholder ?? 'Expand to edit' }, void 0)) : (props.collapsedContent) }, void 0)),
                                id: `nested-field-group1-titleText-id-${index}`,
                            }, actions: _jsxs(Fragment, { children: [props.sortable && (_jsxs(Fragment, { children: [_jsx(Button, { variant: "plain", "aria-label": "Move item up", isDisabled: index === 0, onClick: () => moveUp(index), children: _jsx(ArrowUpIcon, {}, void 0) }, void 0), _jsx(Button, { variant: "plain", "aria-label": "Move item down", isDisabled: index === props.count - 1, onClick: () => moveDown(index), children: _jsx(ArrowDownIcon, {}, void 0) }, void 0)] }, void 0)), _jsx(Button, { variant: "plain", "aria-label": "Remove item", onClick: () => removeItem(props.value), children: _jsx(TrashIcon, {}, void 0) }, void 0)] }, void 0) }, void 0), children: props.children }, void 0) }, void 0)) }, void 0)) }, void 0) }, void 0));
}
function Dropdown2(props) {
    const [open, setOpen] = useState(false);
    const onToggle = useCallback(() => setOpen((open) => !open), []);
    return (_jsx(Dropdown, { isPlain: true, dropdownItems: Children.toArray(props.children), toggle: _jsx(DropdownToggle, { id: "toggle-id", onToggle: onToggle, toggleIndicator: CaretDownIcon, style: { paddingTop: 0 }, children: _jsxs("span", { className: "pf-c-button pf-m-link pf-m-small", style: { padding: 0 }, children: [_jsx(PlusIcon, {}, void 0), "\u00A0 \u00A0", props.placeholder] }, void 0) }, void 0), isOpen: open }, void 0));
}
//# sourceMappingURL=ArrayInput.js.map
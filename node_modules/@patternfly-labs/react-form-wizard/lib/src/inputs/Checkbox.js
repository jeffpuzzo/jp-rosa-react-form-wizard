import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Checkbox as PFCheckbox, Split, Stack, Text } from '@patternfly/react-core';
import { CheckIcon } from '@patternfly/react-icons';
import { Fragment } from 'react';
import { Indented } from '../components/Indented';
import { LabelHelp } from '../components/LabelHelp';
import { DisplayMode } from '../contexts/DisplayModeContext';
import { useInput } from './Input';
import { InputLabel } from './InputLabel';
export function Checkbox(props) {
    const { displayMode: mode, value, setValue, hidden, id } = useInput(props);
    if (hidden)
        return _jsx(Fragment, {}, void 0);
    if (mode === DisplayMode.Details) {
        if (!value)
            return _jsx(Fragment, {}, void 0);
        return (_jsxs(Fragment, { children: [_jsxs(Split, { id: id, children: [_jsx(CheckIcon, { style: { paddingRight: 5 } }, void 0), _jsx("div", { className: "pf-c-description-list__term", style: { paddingLeft: 2 }, children: props.label }, void 0)] }, void 0), value && props.children] }, void 0));
    }
    return (_jsxs(Stack, { hasGutter: true, children: [_jsxs(Stack, { children: [_jsx(InputLabel, { ...props, id: id, label: props.title, helperText: undefined, children: _jsxs(Split, { children: [_jsx(PFCheckbox, { id: id, isChecked: value, onChange: setValue, label: props.label, value: value }, void 0), _jsx(LabelHelp, { id: id, labelHelp: props.labelHelp, labelHelpTitle: props.labelHelpTitle }, void 0)] }, void 0) }, void 0), props.helperText && (_jsx(Text, { className: "pf-c-form__helper-text", style: { paddingLeft: 22 }, children: props.helperText }, void 0))] }, void 0), value && _jsx(Indented, { paddingBottom: 8, children: props.children }, void 0)] }, void 0));
}
//# sourceMappingURL=Checkbox.js.map
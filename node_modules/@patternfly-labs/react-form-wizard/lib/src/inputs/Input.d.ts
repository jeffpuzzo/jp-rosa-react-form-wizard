export declare type HiddenFn = (item: any) => boolean;
export declare type InputCommonProps<ValueT = any> = {
    id?: string;
    path: string;
    hidden?: (item: any) => boolean;
    validation?: (value: ValueT) => string | undefined;
    required?: boolean;
    readonly?: boolean;
    disabled?: boolean;
    label?: string;
    labelHelp?: string;
    labelHelpTitle?: string;
    helperText?: string;
    disabledInEditMode?: boolean;
    inputValueToPathValue?: (inputValue: unknown, pathValue: unknown) => unknown;
    pathValueToInputValue?: (pathValue: unknown) => unknown;
    onValueChange?: (value: unknown, item?: any) => void;
};
export declare function useID(props: {
    id?: string;
    path: string;
}): string;
export declare function usePath(props: {
    path: string;
}): string;
export declare function useValue(props: Pick<InputCommonProps, 'id' | 'path' | 'label' | 'inputValueToPathValue' | 'pathValueToInputValue' | 'onValueChange'>, defaultValue: any): [value: any, setValue: (value: any) => void];
export declare function useInputValidation(props: Pick<InputCommonProps, 'id' | 'path' | 'label' | 'required' | 'validation'>): {
    validated: "error" | undefined;
    error: string | undefined;
};
export declare function useInputHidden(props: {
    hidden?: (item: any) => boolean;
}): boolean;
export declare function lowercaseFirst(label: string): string;
export declare function useInput(props: InputCommonProps): {
    id: string;
    path: string;
    displayMode: import("../contexts/DisplayModeContext").DisplayMode;
    value: any;
    setValue: (value: any) => void;
    validated: "error" | undefined;
    error: string | undefined;
    hidden: boolean;
    disabled: boolean | undefined;
};

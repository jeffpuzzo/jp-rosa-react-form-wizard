import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button, Divider, List, ListItem, Text, TextInput } from '@patternfly/react-core';
import { PlusIcon, TrashIcon } from '@patternfly/react-icons';
import { Fragment, useState } from 'react';
import { Indented } from '../components/Indented';
import { LabelHelp } from '../components/LabelHelp';
import { DisplayMode } from '../contexts/DisplayModeContext';
import { useInput } from './Input';
export function KeyValue(props) {
    const { displayMode: mode, value, setValue, hidden, id } = useInput(props);
    const [pairs] = useState(() => Object.keys(value).map((key) => ({ key, value: value[key] })));
    const onKeyChange = (index, newKey) => {
        pairs[index].key = newKey;
        setValue(pairs.reduce((result, pair) => {
            result[pair.key] = pair.value;
            return result;
        }, {}));
    };
    const onValueChange = (index, newValue) => {
        pairs[index].value = newValue;
        setValue(pairs.reduce((result, pair) => {
            result[pair.key] = pair.value;
            return result;
        }, {}));
    };
    const onNewKey = () => {
        pairs.push({ key: '', value: '' });
        setValue(pairs.reduce((result, pair) => {
            result[pair.key] = pair.value;
            return result;
        }, {}));
    };
    const onDeleteKey = (index) => {
        pairs.splice(index, 1);
        setValue(pairs.reduce((result, pair) => {
            result[pair.key] = pair.value;
            return result;
        }, {}));
    };
    if (hidden)
        return _jsx(Fragment, {}, void 0);
    if (mode === DisplayMode.Details) {
        if (!pairs.length)
            return _jsx(Fragment, {}, void 0);
        return (_jsxs(Fragment, { children: [_jsx("div", { className: "pf-c-description-list__term", children: props.label }, void 0), _jsx(Indented, { id: id, children: _jsx(List, { style: { marginTop: -4 }, isPlain: props.summaryList !== true, children: pairs.map((pair, index) => (_jsxs(ListItem, { style: { paddingBottom: 4 }, children: [pair.key, " ", pair.value !== undefined && _jsxs("span", { children: [" = ", pair.value] }, void 0)] }, index))) }, void 0) }, void 0)] }, void 0));
    }
    return (_jsxs("div", { id: id, style: { display: 'flex', flexDirection: 'column', rowGap: pairs.length ? 8 : 4 }, children: [_jsxs("div", { children: [_jsx("span", { className: "pf-c-form__label pf-c-form__label-text", children: props.label }, void 0), props.labelHelp && _jsx(LabelHelp, { id: id, labelHelp: props.labelHelp, labelHelpTitle: props.labelHelpTitle }, void 0)] }, void 0), props.helperText && _jsx(Text, { component: "small", children: props.helperText }, void 0), _jsx("div", { style: {
                    display: 'grid',
                    gridTemplateColumns: 'fit-content(200px) fit-content(0) auto fit-content(0)',
                    alignItems: 'center',
                    columnGap: 8,
                    rowGap: 8,
                }, children: pairs.map((pair, index) => {
                    return (_jsxs(Fragment, { children: [_jsx(TextInput, { id: `key-${index + 1}`, value: pair.key, onChange: (e) => onKeyChange(index, e) }, void 0), _jsx("span", { children: "=" }, void 0), _jsx(TextInput, { id: `value-${index + 1}`, value: pair.value, onChange: (e) => onValueChange(index, e) }, void 0), _jsx(Button, { variant: "plain", "aria-label": "Remove item", onClick: () => onDeleteKey(index), children: _jsx(TrashIcon, {}, void 0) }, void 0)] }, index));
                }) }, void 0), !Object.keys(pairs).length && _jsx(Divider, {}, void 0), _jsx("div", { children: _jsxs(Button, { id: "add-button", variant: "link", isSmall: true, "aria-label": "Action", onClick: onNewKey, children: [_jsx(PlusIcon, {}, void 0), " \u00A0 ", props.placeholder ?? 'Add'] }, void 0) }, void 0)] }, void 0));
}
//# sourceMappingURL=KeyValue.js.map
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Chip, ChipGroup, DescriptionListDescription, DescriptionListGroup, DescriptionListTerm, Select as PfSelect, SelectVariant, } from '@patternfly/react-core';
import { Children, Fragment, isValidElement, useCallback, useState } from 'react';
import { DisplayMode } from '../contexts/DisplayModeContext';
import { lowercaseFirst, useInput } from './Input';
import { InputLabel } from './InputLabel';
import './Select.css';
export function Multiselect(props) {
    const { displayMode: mode, value, setValue, validated, hidden, id, disabled } = useInput(props);
    const placeholder = props.placeholder ?? `Select the ${lowercaseFirst(props.label)}`;
    const [open, setOpen] = useState(false);
    const onSelect = useCallback((_, selectedString) => {
        if (typeof selectedString === 'string') {
            let newValues;
            if (Array.isArray(value))
                newValues = [...value];
            else
                newValues = [];
            if (newValues.includes(selectedString)) {
                newValues = newValues.filter((value) => value !== selectedString);
            }
            else {
                newValues.push(selectedString);
            }
            setValue(newValues);
        }
    }, [setValue, value]);
    const onClear = useCallback(() => {
        setValue([]);
    }, [setValue]);
    const onFilter = useCallback((_, filterValue) => Children.toArray(props.children).filter((child) => {
        if (!isValidElement(child))
            return false;
        const value = child.props.value;
        if (typeof value !== 'string')
            return false;
        return value.includes(filterValue);
    }), [props.children]);
    const selections = value;
    if (hidden)
        return _jsx(Fragment, {}, void 0);
    if (mode === DisplayMode.Details) {
        if (!value)
            return _jsx(Fragment, {}, void 0);
        return (_jsxs(DescriptionListGroup, { children: [_jsx(DescriptionListTerm, { children: props.label }, void 0), _jsx(DescriptionListDescription, { id: id, children: selections.length > 5 ? (`${selections.length} selected`) : (_jsx("div", { style: { display: 'flex', flexDirection: 'column', rowGap: 8 }, children: selections.map((selection, index) => {
                            return _jsx("div", { children: selection }, index);
                        }) }, void 0)) }, void 0)] }, void 0));
    }
    return (_jsx("div", { id: id, children: _jsx(InputLabel, { ...props, children: _jsx(PfSelect, { isDisabled: disabled, variant: SelectVariant.checkbox, isOpen: open, onToggle: setOpen, selections: selections, onSelect: onSelect, onClear: props.required ? undefined : onClear, onCreateOption: (value) => props.onCreate?.(value), validated: validated, onFilter: onFilter, hasInlineFilter: Children.toArray(props.children).length > 10, footer: props.footer, placeholderText: Array.isArray(selections) ? (selections.length === 0 ? (placeholder) : (_jsx(ChipGroup, { style: { marginTop: -8, marginBottom: -8 }, numChips: 9999, children: selections.map((selection) => (_jsx(Chip, { isReadOnly: true, children: selection }, selection))) }, void 0))) : (placeholder), children: props.children }, void 0) }, void 0) }, void 0));
}
//# sourceMappingURL=Multiselect.js.map
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { DescriptionListDescription, DescriptionListGroup, DescriptionListTerm, Radio as PfRadio, Text } from '@patternfly/react-core';
import { Children, createContext, Fragment, isValidElement, useContext } from 'react';
import { Indented } from '../components/Indented';
import { DisplayMode } from '../contexts/DisplayModeContext';
import { useInput } from './Input';
import { InputLabel } from './InputLabel';
export const RadioGroupContext = createContext({});
export function RadioGroup(props) {
    const { displayMode: mode, value, setValue, hidden, id } = useInput(props);
    const state = {
        groupID: id,
        value,
        setValue,
        readonly: props.readonly,
        disabled: props.disabled,
    };
    if (hidden)
        return _jsx(Fragment, {}, void 0);
    if (mode === DisplayMode.Details) {
        if (!state.value)
            return _jsx(Fragment, {}, void 0);
        let selectedChild;
        Children.forEach(props.children, (child) => {
            if (isValidElement(child)) {
                const value = child.props.value;
                if (value === state.value) {
                    selectedChild = child;
                }
            }
        });
        if (!selectedChild)
            return _jsx(Fragment, {}, void 0);
        return (_jsxs(Fragment, { children: [_jsxs(DescriptionListGroup, { id: id, children: [_jsx(DescriptionListTerm, { children: props.label }, void 0), _jsx(DescriptionListDescription, { id: selectedChild.props.id, children: selectedChild.props.label }, void 0)] }, void 0), selectedChild.props?.children && selectedChild.props.children] }, void 0));
    }
    return (_jsx(RadioGroupContext.Provider, { value: state, children: _jsx("div", { id: id, children: _jsxs(InputLabel, { ...props, id: id, helperText: undefined, children: [props.helperText && (_jsx(Text, { className: "pf-c-form__helper-text", style: { marginTop: -4, paddingBottom: 8 }, children: props.helperText }, void 0)), _jsx("div", { style: { display: 'flex', flexDirection: 'column', rowGap: 12, paddingBottom: 4 }, children: props.children }, void 0)] }, void 0) }, void 0) }, void 0));
}
export function Radio(props) {
    const radioGroupContext = useContext(RadioGroupContext);
    return (_jsxs(Fragment, { children: [_jsx(PfRadio, { id: props.id, label: props.label, description: props.description, isChecked: radioGroupContext.value === props.value, onChange: () => radioGroupContext.setValue?.(props.value), isDisabled: radioGroupContext.disabled, readOnly: radioGroupContext.readonly, name: radioGroupContext.groupID ?? '' }, void 0), radioGroupContext.value === props.value && _jsx(Indented, { paddingBottom: 16, children: props.children }, void 0)] }, void 0));
}
//# sourceMappingURL=Radio.js.map
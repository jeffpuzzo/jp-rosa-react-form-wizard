import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { InputGroup } from '@patternfly/react-core/dist/js/components/InputGroup';
import { TextArea as PFTextArea } from '@patternfly/react-core/dist/js/components/TextArea';
import { TextInput } from '@patternfly/react-core/dist/js/components/TextInput';
import { Fragment, useState } from 'react';
import { TextDetail } from '..';
import { ClearInputButton } from '../components/ClearInputButton';
import { PasteInputButton } from '../components/PasteInputButton';
import { ShowSecretsButton } from '../components/ShowSecretsButton';
import { DisplayMode } from '../contexts/DisplayModeContext';
import { lowercaseFirst, useInput } from './Input';
import { InputLabel } from './InputLabel';
export function TextArea(props) {
    const { displayMode: mode, value, setValue, validated, hidden, id } = useInput(props);
    const [showSecrets, setShowSecrets] = useState(true);
    if (hidden)
        return _jsx(Fragment, {}, void 0);
    if (mode === DisplayMode.Details) {
        if (!value)
            return _jsx(Fragment, {}, void 0);
        return _jsx(TextDetail, { id: id, path: props.path, label: props.label }, void 0);
    }
    const placeholder = props.placeholder ?? `Enter the ${lowercaseFirst(props.label)}`;
    return (_jsx(InputLabel, { ...props, id: id, children: _jsxs(InputGroup, { children: [value && !showSecrets && props.secret ? (_jsx(TextInput, { id: id, value: value, validated: validated, isReadOnly: true, type: 'password' }, void 0)) : (_jsx(PFTextArea, { id: id, placeholder: placeholder, validated: validated, value: value, onChange: setValue, isReadOnly: props.readonly, type: !props.secret || showSecrets ? 'text' : 'password', spellCheck: "false", resizeOrientation: "vertical", autoResize: true }, void 0)), value !== '' && props.secret && _jsx(ShowSecretsButton, { showSecrets: showSecrets, setShowSecrets: setShowSecrets }, void 0), value === '' && _jsx(PasteInputButton, { setValue: setValue, setShowSecrets: setShowSecrets }, void 0), value !== '' && !props.readonly && !props.disabled && (_jsx(ClearInputButton, { onClick: () => {
                        setValue('');
                        setShowSecrets(false);
                    } }, void 0))] }, void 0) }, void 0));
}
//# sourceMappingURL=TextArea.js.map
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { DescriptionListDescription, Split, TimePicker } from '@patternfly/react-core';
import { FormGroup } from '@patternfly/react-core/dist/js/components/Form';
import { CheckIcon } from '@patternfly/react-icons';
import get from 'get-value';
import { Fragment, useContext } from 'react';
import set from 'set-value';
import { useData } from '../contexts/DataContext';
import { ItemContext } from '../contexts/ItemContext';
import { DisplayMode, useDisplayMode } from '../contexts/DisplayModeContext';
import { useID } from './Input';
export function TimeRange(props) {
    const id = useID(props);
    const path = props.path ?? id;
    const { update } = useData();
    const mode = useDisplayMode();
    const item = useContext(ItemContext);
    const value = get(item, path);
    const showValidation = false;
    let error = undefined;
    let validated = undefined;
    if (showValidation) {
        if (props.validation) {
            error = props.validation(value);
        }
        validated = error ? 'error' : undefined;
    }
    if (props.hidden)
        return _jsx(Fragment, {}, void 0);
    if (mode === DisplayMode.Details) {
        if (!value)
            return _jsx(Fragment, {}, void 0);
        return (_jsxs(Split, { hasGutter: true, children: [_jsx(CheckIcon, {}, void 0), _jsx(DescriptionListDescription, { children: props.label }, void 0)] }, void 0));
    }
    return (_jsx(Fragment, { children: _jsx(FormGroup, { id: `${id}-form-group`, fieldId: id, isInline: true, label: props.label, helperText: props.helperText, helperTextInvalid: error, validated: validated, isRequired: true, children: _jsx(TimePicker, { id: `${id}-time-picker`, onChange: (value) => {
                    set(item, path, value);
                    update();
                }, label: props.label, value: value }, id) }, void 0) }, void 0));
}
//# sourceMappingURL=TimeRange.js.map
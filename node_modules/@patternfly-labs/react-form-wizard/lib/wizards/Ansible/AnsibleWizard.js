import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment } from 'react';
import { ArrayInput as ArrayInput, KeyValue, Section, Select as Select, Step, TextInput, WizardPage, } from '../../src';
export function AnsibleWizard(props) {
    return (_jsxs(WizardPage, { title: "Create Ansible automation", breadcrumb: props.breadcrumb, onSubmit: props.onSubmit, onCancel: props.onCancel, defaultData: props.data ?? {
            apiVersion: 'cluster.open-cluster-management.io/v1beta1',
            kind: 'ClusterCurator',
            metadata: {},
        }, children: [_jsx(Step, { label: "Details", id: "details", children: _jsxs(Section, { label: "Details", prompt: "Configure the automation", description: "Automation is accomplished by creating a ClusterCurator resource which can be selected during cluster creation to automate running ansible jobs.", children: [_jsx(TextInput, { label: "Name", id: "name", path: "metadata.name", required: true }, void 0), _jsx(Select, { label: "Namespace", id: "namespace", path: "metadata.namespace", helperText: "The namespace on the hub cluster where the resources will be created.", options: props.namespaces, required: true }, void 0)] }, void 0) }, void 0), _jsx(Step, { label: "Install", id: "install", children: _jsxs(Section, { id: "install", label: "Install", prompt: "Install Ansible job templates", children: [_jsx(Select, { id: "install-secret", path: "spec.install.towerAuthSecret", label: "Ansible credentials", helperText: "Ansible credentials for jobs run during cluster install.", options: props.credentials, required: true }, void 0), _jsx(ArrayInput, { id: "install-prehooks", path: "spec.install.prehook", label: "Pre-install jobs", helperText: "Ansible job templates run before cluster installation.", placeholder: "Add job template", collapsedContent: "name", collapsedPlaceholder: "Expand to enter the Ansible job template", sortable: true, children: _jsx(JobInputs, {}, void 0) }, void 0), _jsx(ArrayInput, { id: "install-posthooks", path: "spec.install.posthook", label: "Post-install jobs", helperText: "Ansible job templates run after cluster installation.", placeholder: "Add job template", collapsedContent: "name", collapsedPlaceholder: "Expand to enter the Ansible job template", sortable: true, children: _jsx(JobInputs, {}, void 0) }, void 0)] }, void 0) }, void 0), _jsx(Step, { label: "Upgrade", id: "upgrade", children: _jsxs(Section, { id: "upgrade", label: "Upgrade", prompt: "Upgrade Ansible job templates", children: [_jsx(Select, { id: "upgrade-secret", path: "spec.upgrade.towerAuthSecret", label: "Ansible credentials", helperText: "Ansible credentials jobs run during cluster upgrade.", options: props.credentials, required: true }, void 0), _jsx(ArrayInput, { id: "upgrade-prehooks", path: "spec.upgrade.prehook", label: "Pre-upgrade jobs", helperText: "Ansible job templates run before cluster upgrade.", placeholder: "Add job template", collapsedContent: "name", collapsedPlaceholder: "Expand to enter the Ansible job template", sortable: true, children: _jsx(JobInputs, {}, void 0) }, void 0), _jsx(ArrayInput, { id: "upgrade-posthooks", path: "spec.upgrade.posthook", label: "Post-upgrade jobs", helperText: "Ansible job templates run after cluster upgrade.", placeholder: "Add job template", collapsedContent: "name", collapsedPlaceholder: "Expand to enter the Ansible job template", sortable: true, children: _jsx(JobInputs, {}, void 0) }, void 0)] }, void 0) }, void 0)] }, void 0));
}
function JobInputs() {
    return (_jsxs(Fragment, { children: [_jsx(TextInput, { id: "name", path: "name", label: "Ansible job template name", placeholder: "Enter or select Ansible job template name", required: true }, void 0), _jsx(KeyValue, { id: "extra_vars", path: "extra_vars", label: "Extra variables", placeholder: "Add variable" }, void 0)] }, void 0));
}
//# sourceMappingURL=AnsibleWizard.js.map
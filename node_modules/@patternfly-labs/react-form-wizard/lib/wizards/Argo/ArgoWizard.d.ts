import { ReactNode } from 'react';
import { WizardCancel, WizardSubmit } from '../../src';
import { IPlacement } from '../common/resources/IPlacement';
interface Channel {
    metadata?: {
        name?: string;
        namespace?: string;
    };
    spec: {
        pathname: string;
        type: string;
        secretRef?: {
            name: string;
        };
    };
}
interface ArgoWizardProps {
    addClusterSets?: string;
    ansibleCredentials: string[];
    argoServers: string[];
    namespaces: string[];
    onSubmit: WizardSubmit;
    onCancel: WizardCancel;
    placements: IPlacement[];
    channels?: Channel[];
    timeZones: string[];
    getGitRevisions: (channelPath: string, secretArgs?: {
        secretRef?: string | undefined;
        namespace?: string | undefined;
    } | undefined) => Promise<unknown>;
    getGitPaths: (channelPath: string, branch: string, secretArgs?: {
        secretRef?: string | undefined;
        namespace?: string | undefined;
    } | undefined) => Promise<unknown>;
}
export declare function ArgoWizard(props: ArgoWizardProps): JSX.Element;
export declare function DeploymentWindow(props: {
    timeZone: string[];
}): JSX.Element;
export declare function TimeWindow(props: {
    timeZone: string[];
}): JSX.Element;
export declare function ExternalLinkButton(props: {
    id: string;
    href?: string;
    icon?: ReactNode;
}): JSX.Element;
export {};

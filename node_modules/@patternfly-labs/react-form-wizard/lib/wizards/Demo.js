import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Grid, GridItem, Masthead, MastheadBrand, MastheadContent, MastheadMain, MastheadToggle, Nav, NavItem, NavList, Page, PageSidebar, PageToggleButton, Stack, Title, } from '@patternfly/react-core';
import { BarsIcon, GithubIcon } from '@patternfly/react-icons';
import useResizeObserver from '@react-hook/resize-observer';
import { Children, useLayoutEffect, useRef, useState } from 'react';
import { BrowserRouter, Link, useHistory, useLocation } from 'react-router-dom';
import { AnsibleExample } from './Ansible/AnsibleExample';
import { ApplicationExample } from './Application/ApplicationExample';
import { AppExample } from './AppWizard/AppExample';
import { ArgoExample } from './Argo/ArgoExample';
import { Catalog } from './Catalog';
import { ClusterForm } from './Cluster/ClusterForm';
import { CredentialsExample } from './Credentials/CredentialsExample';
import { HomeWizard } from './Home/HomeWizard';
import { InputsWizard } from './Inputs/InputsWizard';
import { CreatePlacement, CreatePlacementRule, EditPlacement, EditPlacementRule, EditPlacements, PlacementExamples, } from './Placement/PlacementExamples';
import { CreatePolicy, EditPolicyCertificate, EditPolicyComplianceOperatorCisScan, EditPolicyComplianceOperatorE8Scan, EditPolicyComplianceOperatorInstall, EditPolicyEtcdEncryption, EditPolicyGatekeeperOperatorDownstream, EditPolicyImageManifestVuln, EditPolicyLimitClusterAdmin, EditPolicyLimitMemory, EditPolicyNamespace, EditPolicyPod, EditPolicyPsp, EditPolicyRole, EditPolicyRoleBinding, EditPolicyScc, PolicyExamples, } from './Policy/PolicyExamples';
import { CreatePolicySet, EditPolicySet1, EditPolicySet2, EditPolicySet3, EditPolicySet4, EditPolicySet5, EditPolicySet6, EditPolicySet7, EditPolicySet8, PolicySetExamples, } from './PolicySet/PolicySetExamples';
import { RosaExample } from './ROSA/RosaExample';
import { RouteE } from './Routes';
var StateE;
(function (StateE) {
    StateE["prototype"] = "Prototype";
    StateE["alpha"] = "Alpha";
    StateE["beta"] = "Beta";
    StateE["production"] = "Production";
    StateE["techPreview"] = "Tech preview";
})(StateE || (StateE = {}));
const wizards = [
    {
        shortName: 'Ansible',
        name: 'Ansible automation',
        route: RouteE.Ansible,
        description: 'Multi-Cluster Engine uses ansible to run ansible jobs during cluster provisioning and upgrade.',
        labels: ['MCE'],
        state: StateE.beta,
    },
    {
        shortName: 'Application',
        name: 'Application',
        route: RouteE.Application,
        description: 'Advanced Cluster Management configures applications for deployment to clusters managed by ACM.',
        labels: ['ACM'],
        state: StateE.alpha,
    },
    {
        shortName: 'ArgoCD',
        name: 'ArgoCD',
        route: RouteE.ArgoCD,
        description: 'Advanced Cluster Management configures applications for deployment to clusters managed by ACM.',
        labels: ['ACM'],
        state: StateE.alpha,
    },
    {
        shortName: 'Cluster',
        name: 'Cluster',
        route: RouteE.Cluster,
        state: StateE.prototype,
        description: 'Multi-Cluster Engine creates clusters on cloud providers. This is an early prototype of a possible cluster wizard flow.',
        labels: ['MCE'],
    },
    {
        shortName: 'Credentials',
        name: 'Credentials',
        route: RouteE.Credentials,
        description: 'Multi-Cluster Engine uses credentials to provision clusters on cloud providers. Credentials are also used for integrations such as automation using Ansible.',
        labels: ['MCE'],
        state: StateE.alpha,
    },
    {
        shortName: 'Placement',
        name: 'Placement',
        route: RouteE.Placement,
        description: 'Advanced Cluster Management has placement custom resources to control the placement of various resources on managed clusters. This is an early prototype of common wizard functionality for handling placement.',
        labels: ['ACM'],
        state: StateE.prototype,
    },
    {
        shortName: 'Policy',
        name: 'Policy',
        route: RouteE.Policy,
        description: 'Advanced Cluster Management uses policies to generate reports and validate a cluster compliance based on specified security standards, categories, and controls.',
        labels: ['ACM'],
        state: StateE.alpha,
    },
    {
        shortName: 'Policy Set',
        name: 'Policy Set',
        route: RouteE.PolicySet,
        description: 'Advanced Cluster Management groups policies in policy sets.',
        labels: ['ACM'],
        state: StateE.beta,
    },
    {
        shortName: 'ROSA',
        name: 'ROSA',
        route: RouteE.ROSA,
        description: "Red Hat OpenShift Service on AWS provides a model that allows Red Hat to deploy clusters into a customer's existing Amazon Web Service (AWS) account.",
        state: StateE.prototype,
    },
];
export default function Demo() {
    return (_jsx(BrowserRouter, { children: _jsx(Page, { header: _jsx(DemoHeader, {}, void 0), sidebar: _jsx(DemoSidebar, {}, void 0), isManagedSidebar: true, defaultManagedSidebarIsOpen: true, style: { height: '100vh' }, children: _jsx(DemoRouter, {}, void 0) }, void 0) }, void 0));
}
export function DemoRouter() {
    const location = useLocation();
    switch (location.search) {
        case RouteE.Ansible:
            return _jsx(AnsibleExample, {}, void 0);
        case RouteE.Application:
            return _jsx(ApplicationExample, {}, void 0);
        case RouteE.ArgoCD:
            return _jsx(ArgoExample, {}, void 0);
        case RouteE.App:
            return _jsx(AppExample, {}, void 0);
        case RouteE.Cluster:
            return _jsx(ClusterForm, {}, void 0);
        case RouteE.Credentials:
            return _jsx(CredentialsExample, {}, void 0);
        case RouteE.Policy:
            return _jsx(PolicyExamples, {}, void 0);
        case RouteE.CreatePolicy:
            return _jsx(CreatePolicy, {}, void 0);
        case RouteE.EditPolicyLimitClusterAdmin:
            return _jsx(EditPolicyLimitClusterAdmin, {}, void 0);
        case RouteE.EditPolicyRole:
            return _jsx(EditPolicyRole, {}, void 0);
        case RouteE.EditPolicyRoleBinding:
            return _jsx(EditPolicyRoleBinding, {}, void 0);
        case RouteE.EditPolicyComplianceOperatorInstall:
            return _jsx(EditPolicyComplianceOperatorInstall, {}, void 0);
        case RouteE.EditPolicyComplianceOperatorCisScan:
            return _jsx(EditPolicyComplianceOperatorCisScan, {}, void 0);
        case RouteE.EditPolicyComplianceOperatorE8Scan:
            return _jsx(EditPolicyComplianceOperatorE8Scan, {}, void 0);
        case RouteE.EditPolicyGatekeeperOperatorDownstream:
            return _jsx(EditPolicyGatekeeperOperatorDownstream, {}, void 0);
        case RouteE.EditPolicyNamespace:
            return _jsx(EditPolicyNamespace, {}, void 0);
        case RouteE.EditPolicyPod:
            return _jsx(EditPolicyPod, {}, void 0);
        case RouteE.EditPolicyCertificate:
            return _jsx(EditPolicyCertificate, {}, void 0);
        case RouteE.EditPolicyEtcdEncryption:
            return _jsx(EditPolicyEtcdEncryption, {}, void 0);
        case RouteE.EditPolicyLimitMemory:
            return _jsx(EditPolicyLimitMemory, {}, void 0);
        case RouteE.EditPolicyImageManifestVuln:
            return _jsx(EditPolicyImageManifestVuln, {}, void 0);
        case RouteE.EditPolicyPsp:
            return _jsx(EditPolicyPsp, {}, void 0);
        case RouteE.EditPolicyScc:
            return _jsx(EditPolicyScc, {}, void 0);
        case RouteE.Placement:
            return _jsx(PlacementExamples, {}, void 0);
        case RouteE.CreatePlacement:
            return _jsx(CreatePlacement, {}, void 0);
        case RouteE.CreatePlacementRule:
            return _jsx(CreatePlacementRule, {}, void 0);
        case RouteE.EditPlacement:
            return _jsx(EditPlacement, {}, void 0);
        case RouteE.EditPlacementRule:
            return _jsx(EditPlacementRule, {}, void 0);
        case RouteE.EditPlacements:
            return _jsx(EditPlacements, {}, void 0);
        case RouteE.PolicySet:
            return _jsx(PolicySetExamples, {}, void 0);
        case RouteE.CreatePolicySet:
            return _jsx(CreatePolicySet, {}, void 0);
        case RouteE.EditPolicySet1:
            return _jsx(EditPolicySet1, {}, void 0);
        case RouteE.EditPolicySet2:
            return _jsx(EditPolicySet2, {}, void 0);
        case RouteE.EditPolicySet3:
            return _jsx(EditPolicySet3, {}, void 0);
        case RouteE.EditPolicySet4:
            return _jsx(EditPolicySet4, {}, void 0);
        case RouteE.EditPolicySet5:
            return _jsx(EditPolicySet5, {}, void 0);
        case RouteE.EditPolicySet6:
            return _jsx(EditPolicySet6, {}, void 0);
        case RouteE.EditPolicySet7:
            return _jsx(EditPolicySet7, {}, void 0);
        case RouteE.EditPolicySet8:
            return _jsx(EditPolicySet8, {}, void 0);
        case RouteE.ROSA:
            return _jsx(RosaExample, {}, void 0);
        case RouteE.Inputs:
            return _jsx(InputsWizard, {}, void 0);
        case RouteE.Wizards:
            return _jsx(ExampleWizards, {}, void 0);
        default:
            return _jsx(HomeWizard, {}, void 0);
    }
}
function ExampleWizards() {
    const history = useHistory();
    return (_jsx(Catalog, { title: "Example Wizards", breadcrumbs: [{ label: 'Example Wizards' }], filterGroups: [
            {
                id: 'labels',
                label: 'Products',
                filters: [{ value: 'ACM' }, { value: 'MCE' }],
            },
        ], cards: wizards.map((wizard) => ({
            title: wizard.name,
            descriptions: wizard.description ? [wizard.description] : undefined,
            labels: wizard.labels,
            badge: wizard.state,
            onClick: () => history.push(wizard.route),
        })) }, void 0));
}
function DemoHeader() {
    return (_jsxs(Masthead, { children: [_jsx(MastheadToggle, { children: _jsx(PageToggleButton, { variant: "plain", "aria-label": "Global navigation", children: _jsx(BarsIcon, {}, void 0) }, void 0) }, void 0), _jsx(MastheadMain, { children: _jsx(MastheadBrand, { children: _jsxs("div", { style: { display: 'flex', gap: 8, alignItems: 'start' }, children: [_jsxs("svg", { width: "45", height: "40.5", viewBox: "0 0 30 27", xmlns: "http://www.w3.org/2000/svg", children: [_jsx("defs", { children: _jsxs("linearGradient", { x1: "50%", y1: "0%", x2: "50%", y2: "100%", id: "prefix__a", children: [_jsx("stop", { stopColor: "#7DC3E8", stopOpacity: ".6", offset: "0%" }, void 0), _jsx("stop", { stopColor: "#007BBA", offset: "100%" }, void 0)] }, void 0) }, void 0), _jsx("path", { d: "M29.305 13.607L14.803.092 14.696 0l-.136.092L.087 13.607 0 13.69l.068.092 5.756 7.789.058.074h.097l4.3-.925 4.281 5.716.117.158.116-.158 4.3-5.753 4.29.925h.098l.058-.074 5.766-7.789.068-.092-.068-.046zm-8.31 1.563l.506 1.082-2.718 3.626-1.204-.259 3.417-4.449zm.166-1.425l-5.077-10.97L23.22 11.1l-2.058 2.645zm1.165 2.655l.048-.065v-.074l-.815-1.757 2.553-3.404h.058l-.068-.083-5.145-6.004 9.455 8.806L26.47 16.4l-3.32 4.486-3.6-.786 2.776-3.7zm-10.057 3.848l2.398 3.127.126.166.117-.166 2.213-3.127 1.194.268-3.62 4.847-3.622-4.847 1.194-.268zm.602-.425l1.825-16.937 1.806 16.937-1.748 2.47-1.883-2.47zm.97-16.475l-1.717 15.466-3.388-4.393 5.106-11.073zM6.175 11.1l7.144-8.325-5.087 10.97L6.174 11.1zm4.26-6.105L5.29 10.998l-.068.102.068.083 2.592 3.367-.815 1.758v.138L9.794 20.1l-3.591.786L.97 13.773l9.464-8.778zm1.38 14.652l-1.204.259L7.9 16.252l.495-1.082 3.417 4.477zM15.53 3.348l5.115 11.1-3.378 4.394-1.737-15.494z", fill: "url(#prefix__a)" }, void 0)] }, void 0), _jsxs("div", { style: { color: 'white' }, children: [_jsx(Title, { headingLevel: "h4", style: { fontWeight: 'bold', lineHeight: 1.3 }, children: "PatternFly Labs" }, void 0), _jsx(Title, { headingLevel: "h3", style: { fontWeight: 'lighter', lineHeight: 1.3 }, children: "React Form Wizard" }, void 0)] }, void 0)] }, void 0) }, void 0) }, void 0), _jsxs(MastheadContent, { children: [_jsx("span", { style: { flexGrow: 1 } }, void 0), _jsx("a", { href: "https://github.com/patternfly-labs/react-form-wizard", style: { color: 'white' }, children: _jsx(GithubIcon, { size: "lg" }, void 0) }, void 0)] }, void 0)] }, void 0));
}
function DemoSidebar() {
    const location = useLocation();
    return (_jsx(PageSidebar, { nav: _jsx(Nav, { children: _jsxs(NavList, { children: [_jsx(NavItem, { isActive: location.search === '', children: _jsx(Link, { to: RouteE.Home, children: "Home" }, void 0) }, void 0), _jsx(NavItem, { isActive: location.search === RouteE.Inputs, children: _jsx(Link, { to: RouteE.Inputs, children: "Inputs" }, void 0) }, void 0), _jsx(NavItem, { isActive: location.search === RouteE.Wizards, children: _jsx(Link, { to: RouteE.Wizards, children: "Example Wizards" }, void 0) }, void 0)] }, void 0) }, void 0) }, void 0));
}
export function Masonry(props) {
    const target = useRef(null);
    const [columns, setColumns] = useState(2);
    useResizeObserver(target, (entry) => {
        setColumns(Math.max(Math.floor(entry.contentRect.width / props.size), 1));
    });
    const [span, setSpan] = useState(2);
    useLayoutEffect(() => {
        switch (columns) {
            case 1:
                setSpan(12);
                break;
            case 2:
                setSpan(6);
                break;
            case 3:
                setSpan(4);
                break;
            case 4:
                setSpan(3);
                break;
            case 5:
                setSpan(2);
                break;
            case 6:
                setSpan(2);
                break;
            default:
                setSpan(1);
                break;
        }
    }, [columns]);
    const realColumns = 12 / span;
    return (_jsx("div", { ref: target, children: _jsx(Grid, { hasGutter: true, style: { maxWidth: realColumns * props.size }, children: new Array(realColumns).fill(0).map((_, index) => (_jsx(GridItem, { span: span, children: _jsx(Stack, { hasGutter: true, children: Children.toArray(props.children)
                        .filter((_, i) => (i - index) % realColumns === 0)
                        .map((child) => child) }, void 0) }, index))) }, void 0) }, void 0));
}
//# sourceMappingURL=Demo.js.map
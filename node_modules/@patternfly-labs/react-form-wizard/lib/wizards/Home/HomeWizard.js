import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CodeBlock, DescriptionList, DescriptionListDescription, DescriptionListGroup, DescriptionListTerm, List, ListItem, } from '@patternfly/react-core';
import { useHistory } from 'react-router-dom';
import { Section, Step, WizardPage } from '../../src';
import { Indented } from '../../src/components/Indented';
export function HomeWizard() {
    const history = useHistory();
    return (_jsxs(WizardPage, { title: "Welcome", onSubmit: () => Promise.resolve(undefined), onCancel: () => history.push('.'), yaml: false, hasButtons: false, children: [_jsxs(Step, { label: "Introduction", id: "introduction", children: [_jsx(Section, { label: "Welcome to the React Form Wizard by PatternFly Labs", description: "A framework for building wizards using PatternFly.", autohide: false }, void 0), _jsx(Section, { label: "React Example", description: "Wizards contain steps which contain sections which contain inputs.", autohide: false, children: _jsx(CodeBlock, { children: _jsxs("pre", { style: { fontSize: 'medium' }, children: [_jsx("div", { children: `<WizardPage title="My Wizard">` }, void 0), _jsx("div", { children: `    <Step label="Details" id="details-step">` }, void 0), _jsx("div", { children: `        <Section label="Details">` }, void 0), _jsx("div", { children: `            <TextInput label="Name" path="name" required />` }, void 0), _jsx("div", { children: `            <Select label="Namespace" path="namespace" options={['default', 'namespace-1']} />` }, void 0), _jsx("div", { children: `        </Section>` }, void 0), _jsx("div", { children: `    </Step>` }, void 0), _jsx("div", { children: `</WizardPage>` }, void 0)] }, void 0) }, void 0) }, void 0)] }, void 0), _jsx(Step, { label: "Steps", id: "steps", children: _jsx(Section, { label: "Steps", autohide: false, children: _jsx(List, { children: _jsx(ListItem, { children: "A step is automatically hidden if all the sections and inputs in the step are hidden." }, void 0) }, void 0) }, void 0) }, void 0), _jsx(Step, { label: "Sections", id: "sections", children: _jsx(Section, { label: "Sections", autohide: false, children: _jsxs(List, { children: [_jsx(ListItem, { children: "A section must have a unique ID." }, void 0), _jsx(ListItem, { children: "A section is automatically hidden if all the inputs in the section are hidden." }, void 0), _jsx(ListItem, { children: "In the review step of the wizard, a section is hidden if there are no inputs with value in the section." }, void 0), _jsx(ListItem, { children: "A section also has a hidden function that can be used to hide the section and all the sections inputs." }, void 0)] }, void 0) }, void 0) }, void 0), _jsxs(Step, { label: "Inputs", id: "inputs", children: [_jsx(Section, { label: "Inputs", description: "The wizard works by setting an item context which inputs use as a data source.\nInputs have a path prop that is used to get value or set value in the item contex.", autohide: false }, void 0), _jsx(Section, { label: "Input common properties", autohide: false, children: _jsx(Indented, { children: _jsxs(DescriptionList, { isHorizontal: true, isCompact: true, children: [_jsxs(DescriptionListGroup, { children: [_jsx(DescriptionListTerm, { children: "label" }, void 0), _jsx(DescriptionListDescription, { children: "The label for the input." }, void 0)] }, void 0), _jsxs(DescriptionListGroup, { children: [_jsx(DescriptionListTerm, { children: "path" }, void 0), _jsxs(DescriptionListDescription, { children: ["The ", _jsx("a", { href: "https://github.com/jonschlinkert/set-value#object-paths", children: "path" }, void 0), " the input is getting and setting value to, in the current item context."] }, void 0)] }, void 0), _jsxs(DescriptionListGroup, { children: [_jsx(DescriptionListTerm, { children: "id" }, void 0), _jsx(DescriptionListDescription, { children: "Optional id of the input control. Used for testing. If not set, defaults to a sanitized version of the path." }, void 0)] }, void 0), _jsxs(DescriptionListGroup, { children: [_jsx(DescriptionListTerm, { children: "validation" }, void 0), _jsx(DescriptionListDescription, { children: "Optional validation function that takes in the current item context and input value. It should return an error string if there is an error." }, void 0)] }, void 0), _jsxs(DescriptionListGroup, { children: [_jsx(DescriptionListTerm, { children: "hidden" }, void 0), _jsx(DescriptionListDescription, { children: "Optional hidden function that takes in the current item context and returns true if the input should be hidden." }, void 0)] }, void 0)] }, void 0) }, void 0) }, void 0)] }, void 0)] }, void 0));
}
//# sourceMappingURL=HomeWizard.js.map
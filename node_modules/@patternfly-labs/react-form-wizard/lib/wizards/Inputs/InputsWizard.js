import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useHistory } from 'react-router-dom';
import { ArrayInput, Checkbox, KeyValue, Radio, RadioGroup, Section, Select, Step, StringsInput, TableSelect, TextArea, TextInput, Tile, Tiles, WizardPage, } from '../../src';
import { onCancel, onSubmit } from '../common/utils';
export function InputsWizard() {
    const history = useHistory();
    return (_jsxs(WizardPage, { title: "Inputs", onSubmit: onSubmit, onCancel: () => onCancel(history), children: [_jsx(Step, { label: "Text Input", id: "text-input", children: _jsxs(Section, { label: "Text Input", children: [_jsx(TextInput, { label: "Text input", path: "textInput.text" }, void 0), _jsx(TextInput, { label: "Text input required", path: "textInput.required", required: true }, void 0), _jsx(TextInput, { label: "Text input secret", path: "textInput.secret", secret: true }, void 0)] }, void 0) }, void 0), _jsx(Step, { label: "Text Area", id: "text-area", children: _jsxs(Section, { label: "Text Area", children: [_jsx(TextArea, { label: "Text area", path: "textArea.text" }, void 0), _jsx(TextArea, { label: "Text area required", path: "textArea.required", required: true }, void 0), _jsx(TextArea, { label: "Text area secret", path: "textArea.secret", secret: true }, void 0)] }, void 0) }, void 0), _jsx(Step, { label: "Select", id: "select", children: _jsxs(Section, { label: "Select", children: [_jsx(Select, { label: "Select", path: "select.value", options: ['Option 1', 'Option 2'] }, void 0), _jsx(Select, { label: "Select required", path: "select.required", options: ['Option 1', 'Option 2'], required: true }, void 0)] }, void 0) }, void 0), _jsx(Step, { label: "Tiles", id: "tiles", children: _jsx(Section, { label: "Tiles", children: _jsxs(Tiles, { id: "tiles", path: "tile", label: "Tiles", children: [_jsx(Tile, { id: "tile1", value: "tile1", label: "Tile 1" }, void 0), _jsx(Tile, { id: "tile2", value: "tile2", label: "Tile 2" }, void 0), _jsx(Tile, { id: "tile3", value: "tile3", label: "Tile 3" }, void 0)] }, void 0) }, void 0) }, void 0), _jsx(Step, { label: "Radio", id: "radio-step", children: _jsxs(Section, { label: "Radio", children: [_jsxs(RadioGroup, { id: "group-1", path: "radios.group1.value", label: "Radio", children: [_jsx(Radio, { id: "radio-1", label: "Radio 1", value: "radio-1" }, void 0), _jsx(Radio, { id: "radio-2", label: "Radio 2", value: "radio-2" }, void 0)] }, void 0), _jsxs(RadioGroup, { id: "group-2", path: "radios.group2.value", label: "Radio with sub-inputs", children: [_jsx(Radio, { id: "radio-1", label: "Radio 1", value: "radio-1", children: _jsx(TextInput, { label: "Name", path: "radios.group2.name", required: true }, void 0) }, void 0), _jsx(Radio, { id: "radio-2", label: "Radio 2", value: "radio-2", children: _jsx(TextInput, { label: "Name", path: "radios.group2.name", required: true }, void 0) }, void 0)] }, void 0), _jsxs(RadioGroup, { id: "group-3", path: "radios.group3.value", label: "Radio with descriptions", helperText: "Description goes here.", children: [_jsx(Radio, { id: "radio-1", label: "Radio 1", value: "radio-1", description: "Radio 1 description" }, void 0), _jsx(Radio, { id: "radio-2", label: "Radio 2", value: "radio-2", description: "Radio 2 description" }, void 0)] }, void 0), _jsxs(RadioGroup, { id: "group-4", path: "radios.group4.value", label: "Radio with descriptions and sub-inputs", helperText: "Description goes here.", children: [_jsx(Radio, { id: "radio-1", label: "Radio 1", value: "radio-1", description: "Radio 1 description", children: _jsx(TextInput, { label: "Name", path: "radios.group4.name", required: true }, void 0) }, void 0), _jsx(Radio, { id: "radio-2", label: "Radio 2", value: "radio-2", description: "Radio 2 description", children: _jsx(TextInput, { label: "Name", path: "radios.group4.name", required: true }, void 0) }, void 0)] }, void 0), _jsxs(RadioGroup, { id: "group-5", path: "radios.group5.value", label: "Radio (Required)", required: true, children: [_jsx(Radio, { id: "radio-1", label: "Radio 1", value: "radio-1" }, void 0), _jsx(Radio, { id: "radio-2", label: "Radio 2", value: "radio-2" }, void 0)] }, void 0)] }, void 0) }, void 0), _jsx(Step, { label: "Checkbox", id: "checkbox-step", children: _jsxs(Section, { label: "Checkbox", children: [_jsx(Checkbox, { label: "Checkbox", path: "checkboxes.checkbox1.value", id: "checkbox-1" }, void 0), _jsx(Checkbox, { label: "Checkbox with inputs", path: "checkboxes.checkbox2.value", id: "checkbox-2", children: _jsx(TextInput, { label: "Text input", path: "checkboxes.checkbox2.textInput", required: true, id: "checkbox-2-text" }, void 0) }, void 0), _jsx(Checkbox, { label: "Checkbox with description", helperText: "Description goes here.", path: "checkboxes.checkbox3.value", id: "checkbox-3" }, void 0), _jsx(Checkbox, { label: "Checkbox with both", path: "checkboxes.checkbox4.value", helperText: "Description goes here.", id: "checkbox-4", children: _jsx(TextInput, { label: "Text input", path: "checkboxes.checkbox4.textInput", required: true }, void 0) }, void 0)] }, void 0) }, void 0), _jsx(Step, { label: "Key Value", id: "key-value", children: _jsx(Section, { label: "Key Value", children: _jsx(KeyValue, { id: "key-values", path: "key-values", label: "Key Value" }, void 0) }, void 0) }, void 0), _jsx(Step, { label: "Strings Input", id: "strings-input", children: _jsx(Section, { label: "Strings Input", children: _jsx(StringsInput, { id: "string", path: "strings", label: "Strings" }, void 0) }, void 0) }, void 0), _jsx(Step, { label: "Array Input", id: "array-input", children: _jsx(Section, { label: "Array Input", children: _jsxs(ArrayInput, { id: "resources", label: "Resources", path: "resources", placeholder: "Add resource", collapsedContent: "metadata.name", sortable: true, children: [_jsx(TextInput, { label: "Name", path: "metadata.name", required: true }, void 0), _jsx(Select, { label: "Namespace", path: "metadata.namespace", required: true, options: ['namespace-1', 'namespace-2'] }, void 0), _jsx(KeyValue, { id: "labels", path: "metadata.labels", label: "Labels" }, void 0), _jsx(KeyValue, { id: "labels", path: "metadata.annotations", label: "Annotations" }, void 0)] }, void 0) }, void 0) }, void 0), _jsx(Step, { label: "Table Select", id: "table-select", children: _jsx(Section, { label: "Table Select", description: "Table select is used when many selections can be made from many options.", children: _jsx(TableSelect, { id: "string", path: "tableSelect", label: "Strings", columns: [{ name: 'Name', cellFn: (item) => item.name }], items: new Array(100).fill(0).map((_, i) => ({ name: `Item ${i + 1}` })), itemToValue: (item) => item.name, valueMatchesItem: (value, item) => value === item.name, emptyMessage: "Nothing available for selection." }, void 0) }, void 0) }, void 0), _jsxs(Step, { label: "Section", id: "section-step", children: [_jsxs(Section, { label: "Section 1 with description", description: "Description goes here", children: [_jsx(TextInput, { label: "Text 1", path: "section1.text1", id: "text-1", required: true }, void 0), _jsx(TextInput, { label: "Text 2", path: "section1.text2", id: "text-2" }, void 0)] }, void 0), _jsxs(Section, { label: "Section 2 (Collapsable)", collapsable: true, children: [_jsx(TextInput, { label: "Text 3", path: "section2.text3", id: "text-3", required: true }, void 0), _jsx(TextInput, { label: "Text 4", path: "section2.text4", id: "text-4" }, void 0)] }, void 0), _jsx(Section, { label: "Hide Settings", children: _jsx(Checkbox, { label: "Hide section", path: "hideSection", id: "hide-section" }, void 0) }, void 0), _jsx(Section, { label: "Section 3 (Hideable)", description: "This section is hidden using a function to determine if it should be hidden.", hidden: (item) => item.hideSection, children: _jsx(TextInput, { label: "Text input", path: "hideableSection.text", required: true }, void 0) }, void 0)] }, void 0), _jsxs(Step, { label: "Hidden", id: "hidden-step", children: [_jsx(Section, { label: "Hide Settings", description: "This sets a flag which inputs are using to hide themselves.", children: _jsx(Checkbox, { label: "Show hidden", path: "showHidden", id: "show-hidden" }, void 0) }, void 0), _jsxs(Section, { label: "Automatically hidden", description: "A section will automatically hide itelf if all child inputs are hidden.", children: [_jsx(TextInput, { label: "Text input hidden", path: "hidden.textInput", hidden: (item) => !item.showHidden, required: true }, void 0), _jsx(TextArea, { label: "Text area hidden", path: "hidden.textArea", hidden: (item) => !item.showHidden, required: true }, void 0), _jsx(Select, { label: "Select hidden", path: "hidden.select", options: ['Option 1', 'Option 2'], required: true, hidden: (item) => !item.showHidden }, void 0), _jsxs(RadioGroup, { id: "group-hidden", path: "hidden.radio", label: "Radio (Required)", required: true, hidden: (item) => !item.showHidden, children: [_jsx(Radio, { id: "radio-1", label: "Radio 1", value: "radio-1" }, void 0), _jsx(Radio, { id: "radio-2", label: "Radio 2", value: "radio-2" }, void 0)] }, void 0), _jsx(Checkbox, { label: "Checkbox conditionally hidden", path: "hidden.checkbox", hidden: (item) => !item.showHidden }, void 0)] }, void 0)] }, void 0)] }, void 0));
}
//# sourceMappingURL=InputsWizard.js.map
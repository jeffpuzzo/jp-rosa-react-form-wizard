import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ArrayInput, ItemSelector, Select, TextInput } from '../../src';
import { PlacementApiGroup, PlacementKind } from '../common/resources/IPlacement';
import { PlacementBindingKind, PlacementBindingType } from '../common/resources/IPlacementBinding';
import { PlacementRuleKind } from '../common/resources/IPlacementRule';
export function PlacementBindings(props) {
    if (!props.showPlacements && props.placementBindingCount === 1) {
        return (_jsxs(ItemSelector, { selectKey: "kind", selectValue: PlacementBindingKind, children: [_jsx(Select, { path: "placementRef.name", label: "Placement", required: true, hidden: (binding) => binding.placementRef?.kind !== PlacementKind, options: props.existingPlacements.map((placement) => placement.metadata?.name ?? '') }, void 0), _jsx(Select, { path: "placementRef.name", label: "Placement rule", required: true, hidden: (binding) => binding.placementRef?.kind !== PlacementRuleKind, options: props.existingPlacementRules.map((placement) => placement.metadata?.name ?? '') }, void 0)] }, void 0));
    }
    return (_jsxs(ArrayInput, { id: "placement-bindings", label: "Placement bindings", helperText: "To apply a resource to a cluster, the placement must be bound to the resource using a placement binding.", path: null, filter: (resource) => resource.kind === PlacementBindingKind, placeholder: "Add placement binding", collapsedContent: "metadata.name", collapsedPlaceholder: "Expand to enter binding", defaultCollapsed: true, isSection: true, newValue: {
            ...PlacementBindingType,
            metadata: {},
            placementRef: { apiGroup: PlacementApiGroup, kind: PlacementKind, name: '' },
            subjects: [{ apiGroup: props.bindingSubjectApiGroup, kind: props.bindingSubjectKind, name: '' }],
        }, children: [_jsx(TextInput, { path: "metadata.name", label: "Binding name", required: true }, void 0), _jsx(Select, { path: "placementRef.kind", label: "Placement kind", helperText: "The placement rule used to select clusters for placement.", required: true, options: ['Placement', PlacementRuleKind] }, void 0), _jsx(Select, { path: "placementRef.name", label: "Placement", helperText: "The placement used to select clusters.", required: true, hidden: (binding) => binding.placementRef?.kind !== PlacementKind, options: props.existingPlacements.map((placement) => placement.metadata?.name ?? '') }, void 0), _jsx(Select, { path: "placementRef.name", label: "Placement rule", helperText: "The placement rule used to select clusters for placement.", required: true, hidden: (binding) => binding.placementRef?.kind !== PlacementRuleKind, options: props.existingPlacementRules.map((placement) => placement.metadata?.name ?? '') }, void 0), _jsxs(ArrayInput, { path: "subjects", label: "Subjects", helperText: "Placement bindings can have multiple subjects which the placement is applied to.", placeholder: "Add placement subject", collapsedContent: "name", collapsedPlaceholder: "Expand to enter subject", newValue: { apiGroup: props.bindingSubjectApiGroup, kind: props.bindingSubjectKind }, children: [_jsx(Select, { path: "kind", label: "Subject kind", required: true, options: ['PolicySet', 'Policy'] }, void 0), _jsx(TextInput, { path: "name", label: "Subject name", required: true }, void 0)] }, void 0)] }, void 0));
}
//# sourceMappingURL=PlacementBinding.js.map
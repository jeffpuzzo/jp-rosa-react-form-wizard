import { jsx as _jsx } from "react/jsx-runtime";
import { useHistory } from 'react-router-dom';
import { EditMode } from '../../src';
import { Catalog } from '../Catalog';
import { PlacementApiGroup, PlacementKind, PlacementType } from '../common/resources/IPlacement';
import { PlacementBindingApiVersion, PlacementBindingKind, PlacementBindingType } from '../common/resources/IPlacementBinding';
import { PlacementRuleKind, PlacementRuleType } from '../common/resources/IPlacementRule';
import { PolicySetApiGroup, PolicySetKind } from '../common/resources/IPolicySet';
import { clusterSetBindings, namespaces, placementRules, placements, policies } from '../common/test-data';
import { onSubmit } from '../common/utils';
import { RouteE } from '../Routes';
import { PlacementWizard } from './PlacementWizard';
export function onCancel(history) {
    history.push(`./${RouteE.Placement}`);
}
export function PlacementExamples() {
    const history = useHistory();
    return (_jsx(Catalog, { title: "Placement Examples", breadcrumbs: [{ label: 'Example Wizards', to: RouteE.Wizards }, { label: 'Placement Examples' }], cards: [
            {
                title: 'Create placement',
                descriptions: ['Create a new placement.'],
                onClick: () => history.push(RouteE.CreatePlacement),
            },
            {
                title: 'Create placement rule',
                descriptions: ['Create a new placement rule.'],
                onClick: () => history.push(RouteE.CreatePlacementRule),
            },
            {
                title: 'Edit placement',
                featureGroups: [{ title: 'Features', features: ['Placement', 'Placement binding'] }],
                onClick: () => history.push(RouteE.EditPlacement),
            },
            {
                title: 'Edit placement rule',
                featureGroups: [{ title: 'Features', features: ['Placement rule', 'Placement binding'] }],
                onClick: () => history.push(RouteE.EditPlacementRule),
            },
            {
                title: 'Edit placements and placement rules',
                featureGroups: [{ title: 'Features', features: ['2 placements', '2 placement rules', '2 placement bindings'] }],
                onClick: () => history.push(RouteE.EditPlacements),
            },
        ] }, void 0));
}
export function CreatePlacement() {
    const history = useHistory();
    return (_jsx(PlacementWizard, { title: "Create placement", namespaces: namespaces, policies: policies, placements: placements, placementRules: placementRules, clusterSetBindings: clusterSetBindings, onSubmit: onSubmit, onCancel: () => onCancel(history), defaultPlacementType: PlacementKind, bindingSubjectKind: PolicySetKind, bindingSubjectApiGroup: PolicySetApiGroup, resources: [] }, void 0));
}
export function CreatePlacementRule() {
    const history = useHistory();
    return (_jsx(PlacementWizard, { title: "Create placement rule", namespaces: namespaces, policies: policies, placements: placements, placementRules: placementRules, clusterSetBindings: clusterSetBindings, onSubmit: onSubmit, onCancel: () => onCancel(history), defaultPlacementType: PlacementRuleKind, bindingSubjectKind: PolicySetKind, bindingSubjectApiGroup: PolicySetApiGroup, resources: [{ ...PlacementRuleType, metadata: { name: '', namespace: '' } }] }, void 0));
}
export function EditPlacement() {
    const history = useHistory();
    return (_jsx(PlacementWizard, { namespaces: namespaces, policies: policies, clusterSetBindings: clusterSetBindings, placements: placements, placementRules: placementRules, title: "Edit placement", onSubmit: onSubmit, onCancel: () => onCancel(history), editMode: EditMode.Edit, resources: [...placement1Resources], defaultPlacementType: PlacementKind, bindingSubjectKind: PolicySetKind, bindingSubjectApiGroup: PolicySetApiGroup }, void 0));
}
export function EditPlacementRule() {
    const history = useHistory();
    return (_jsx(PlacementWizard, { namespaces: namespaces, policies: policies, clusterSetBindings: clusterSetBindings, placements: placements, placementRules: placementRules, title: "Edit placement rule", onSubmit: onSubmit, onCancel: () => onCancel(history), editMode: EditMode.Edit, resources: [...placementRule1Resources], defaultPlacementType: PlacementRuleKind, bindingSubjectKind: PolicySetKind, bindingSubjectApiGroup: PolicySetApiGroup }, void 0));
}
export function EditPlacements() {
    const history = useHistory();
    return (_jsx(PlacementWizard, { namespaces: namespaces, policies: policies, clusterSetBindings: clusterSetBindings, placements: placements, placementRules: placementRules, title: "Edit placements", onSubmit: onSubmit, onCancel: () => onCancel(history), editMode: EditMode.Edit, resources: [...placement1Resources, ...placement2Resources, ...placementRule1Resources, ...placementRule2Resources], defaultPlacementType: PlacementRuleKind, bindingSubjectKind: PolicySetKind, bindingSubjectApiGroup: PolicySetApiGroup }, void 0));
}
const placement1Resources = [
    {
        ...PlacementType,
        metadata: { name: 'my-placement-1', namespace: 'my-namespace-1' },
        spec: {
            numberOfClusters: 1,
            clusterSets: ['my-cluster-set-1'],
            predicates: [
                {
                    requiredClusterSelector: {
                        labelSelector: {
                            matchLabels: {
                                'local-cluster': 'true',
                            },
                        },
                    },
                },
            ],
        },
    },
    {
        ...PlacementBindingType,
        metadata: { name: 'my-placement-1-binding', namespace: 'my-namespace-1' },
        placementRef: { apiGroup: PlacementApiGroup, kind: PlacementKind, name: 'my-placement-1' },
        subjects: [],
    },
];
const placement2Resources = [
    {
        ...PlacementType,
        metadata: {
            name: 'my-placement-2',
            namespace: 'my-namespace-1',
        },
        spec: {
            numberOfClusters: 1,
            clusterSets: ['policy-test-cluster-set'],
            predicates: [
                {
                    requiredClusterSelector: {
                        labelSelector: {
                            matchLabels: {
                                'local-cluster': 'true',
                                abc: '123',
                                def: '456',
                                ghi: '789',
                            },
                            matchExpressions: [
                                {
                                    key: 'abc',
                                    operator: 'In',
                                    values: ['123', '456', '789'],
                                },
                                {
                                    key: 'def',
                                    operator: 'NotIn',
                                    values: ['123', '456', '789'],
                                },
                                {
                                    key: 'ghi',
                                    operator: 'Exists',
                                },
                                {
                                    key: 'jkl',
                                    operator: 'DoesNotExist',
                                },
                            ],
                        },
                        claimSelector: {
                            matchExpressions: [
                                {
                                    key: 'abc',
                                    operator: 'In',
                                    values: ['123', '456', '789'],
                                },
                                {
                                    key: 'def',
                                    operator: 'NotIn',
                                    values: ['123', '456', '789'],
                                },
                                {
                                    key: 'ghi',
                                    operator: 'Exists',
                                },
                                {
                                    key: 'jkl',
                                    operator: 'DoesNotExist',
                                },
                            ],
                        },
                    },
                },
                {
                    requiredClusterSelector: {
                        labelSelector: {
                            matchLabels: {
                                'local-cluster': 'true',
                                abc: '123',
                                def: '456',
                                ghi: '789',
                            },
                            matchExpressions: [
                                {
                                    key: 'abc',
                                    operator: 'In',
                                    values: ['123', '456', '789'],
                                },
                                {
                                    key: 'def',
                                    operator: 'NotIn',
                                    values: ['123', '456', '789'],
                                },
                                {
                                    key: 'ghi',
                                    operator: 'Exists',
                                },
                                {
                                    key: 'jkl',
                                    operator: 'DoesNotExist',
                                },
                            ],
                        },
                        claimSelector: {
                            matchExpressions: [
                                {
                                    key: 'abc',
                                    operator: 'In',
                                    values: ['123', '456', '789'],
                                },
                                {
                                    key: 'def',
                                    operator: 'NotIn',
                                    values: ['123', '456', '789'],
                                },
                                {
                                    key: 'ghi',
                                    operator: 'Exists',
                                },
                                {
                                    key: 'jkl',
                                    operator: 'DoesNotExist',
                                },
                            ],
                        },
                    },
                },
            ],
        },
    },
    {
        ...PlacementBindingType,
        metadata: { name: 'my-placement-2-binding', namespace: 'my-namespace-1' },
        placementRef: { apiGroup: PlacementApiGroup, kind: PlacementKind, name: 'my-placement-2' },
        subjects: [],
    },
];
const placementRule1Resources = [
    {
        ...PlacementRuleType,
        metadata: { name: 'my-placement-rule-1', namespace: 'my-namespace-1' },
        spec: {
            clusterSelector: {
                matchLabels: {
                    'local-cluster': 'true',
                },
            },
        },
    },
    {
        apiVersion: PlacementBindingApiVersion,
        kind: PlacementBindingKind,
        metadata: { name: 'my-placement-rule-1-binding', namespace: 'my-namespace-1' },
        placementRef: { apiGroup: PlacementApiGroup, kind: PlacementKind, name: 'my-placement-rule-1' },
        subjects: [],
    },
];
const placementRule2Resources = [
    {
        ...PlacementRuleType,
        metadata: { name: 'my-placement-rule-2', namespace: 'my-namespace-1' },
        spec: {
            clusterSelector: {
                matchLabels: { 'local-cluster': 'true' },
                matchExpressions: [
                    {
                        key: 'abc',
                        operator: 'In',
                        values: ['123', '456', '789'],
                    },
                    {
                        key: 'def',
                        operator: 'NotIn',
                        values: ['123', '456', '789'],
                    },
                    {
                        key: 'ghi',
                        operator: 'Exists',
                    },
                    {
                        key: 'jkl',
                        operator: 'DoesNotExist',
                    },
                ],
            },
        },
    },
    {
        ...PlacementBindingType,
        metadata: { name: 'my-placement-rule-2-binding', namespace: 'my-namespace-1' },
        placementRef: { apiGroup: PlacementApiGroup, kind: PlacementKind, name: 'my-placement-rule-2' },
        subjects: [],
    },
];
//# sourceMappingURL=PlacementExamples.js.map
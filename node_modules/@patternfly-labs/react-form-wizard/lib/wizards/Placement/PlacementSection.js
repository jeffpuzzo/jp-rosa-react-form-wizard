import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ToggleGroup, ToggleGroupItem } from '@patternfly/react-core';
import { useEffect, useState } from 'react';
import { DetailsHidden, EditMode, Section } from '../../src';
import { useData } from '../../src/contexts/DataContext';
import { useEditMode } from '../../src/contexts/EditModeContext';
import { useSetHasInputs } from '../../src/contexts/HasInputsProvider';
import { useItem } from '../../src/contexts/ItemContext';
import { PlacementApiGroup, PlacementApiVersion, PlacementKind } from '../common/resources/IPlacement';
import { PlacementBindingKind, PlacementBindingType } from '../common/resources/IPlacementBinding';
import { PlacementRuleApiGroup, PlacementRuleKind, PlacementRuleType } from '../common/resources/IPlacementRule';
import { Placements } from './Placement';
import { PlacementBindings } from './PlacementBinding';
import { PlacementRules } from './PlacementRule';
export function PlacementSection(props) {
    const { update } = useData();
    const resources = useItem();
    const editMode = useEditMode();
    const [showPlacements, setShowPlacements] = useState(props.defaultPlacementKind === PlacementKind);
    const [showPlacementRules, setShowPlacementRules] = useState(props.defaultPlacementKind === PlacementRuleKind);
    const [showPlacementBindings, setShowPlacementBindings] = useState(false);
    const [placementCount, setPlacementCount] = useState(0);
    const [placementRuleCount, setPlacementRuleCount] = useState(0);
    const [placementBindingCount, setPlacementBindingCount] = useState(0);
    useEffect(() => {
        setPlacementCount(resources?.filter((resource) => resource.kind === PlacementKind).length);
        setPlacementRuleCount(resources?.filter((resource) => resource.kind === PlacementRuleKind).length);
        setPlacementBindingCount(resources?.filter((resource) => resource.kind === PlacementBindingKind).length);
    }, [resources, setPlacementCount, setPlacementRuleCount, setPlacementBindingCount]);
    useEffect(() => {
        if (placementCount > 0)
            setShowPlacements(true);
        if (placementRuleCount > 0)
            setShowPlacementRules(true);
        if (placementCount + placementRuleCount > 1)
            setShowPlacementBindings(true);
        if (placementCount + placementRuleCount === 0 && placementBindingCount > 0)
            setShowPlacementBindings(true);
    }, [placementCount, placementRuleCount, setShowPlacements, setShowPlacementRules, setShowPlacementBindings, placementBindingCount]);
    useEffect(() => {
        const placementCount = resources?.filter((resource) => resource.kind === PlacementKind).length;
        const placementRuleCount = resources?.filter((resource) => resource.kind === PlacementRuleKind).length;
        const placementBindingCount = resources?.filter((resource) => resource.kind === PlacementBindingKind).length;
        if (placementCount === 1 && placementRuleCount === 0 && placementBindingCount === 0) {
            resources.push({
                ...PlacementBindingType,
                metadata: { name: '', namespace: '' },
                placementRef: { apiGroup: PlacementApiGroup, kind: PlacementKind, name: '' },
                subjects: [{ apiGroup: props.bindingSubjectApiGroup, kind: props.bindingSubjectKind, name: '' }],
            });
            update();
        }
        else if (placementCount === 0 && placementRuleCount === 1 && placementBindingCount === 0) {
            resources.push({
                ...PlacementBindingType,
                metadata: { name: '', namespace: '' },
                placementRef: { apiGroup: PlacementApiGroup, kind: PlacementKind, name: '' },
                subjects: [{ apiGroup: props.bindingSubjectApiGroup, kind: props.bindingSubjectKind, name: '' }],
            });
            update();
        }
    }, [
        placementCount,
        placementRuleCount,
        placementBindingCount,
        resources,
        props.bindingSubjectApiGroup,
        props.bindingSubjectKind,
        update,
    ]);
    const setHasInputs = useSetHasInputs();
    useEffect(() => setHasInputs(), [setHasInputs]);
    return (_jsxs(Section, { label: "Cluster placement", autohide: false, children: [editMode === EditMode.Create && (_jsx(PlacementSelector, { placementCount: placementCount, placementRuleCount: placementRuleCount, placementBindingCount: placementBindingCount, bindingSubjectKind: props.bindingSubjectKind, bindingSubjectApiGroup: props.bindingSubjectApiGroup, defaultPlacementKind: props.defaultPlacementKind, setShowPlacements: setShowPlacements, setShowPlacementRules: setShowPlacementRules, setShowPlacementBindings: setShowPlacementBindings }, void 0)), showPlacements && (_jsx(Placements, { clusterSetBindings: props.existingclusterSetBindings, bindingKind: props.bindingSubjectKind, placementCount: placementCount, showPlacementRules: showPlacementRules, showPlacementBindings: showPlacementBindings }, void 0)), showPlacementRules && (_jsx(PlacementRules, { showPlacements: showPlacements, placementRuleCount: placementRuleCount, showPlacementBindings: showPlacementBindings }, void 0)), showPlacementBindings && (_jsx(PlacementBindings, { showPlacements: showPlacements, showPlacementRules: showPlacementRules, showPlacementBindings: showPlacementBindings, placementCount: placementCount, placementRuleCount: placementRuleCount, placementBindingCount: placementBindingCount, bindingSubjectKind: props.bindingSubjectKind, bindingSubjectApiGroup: props.bindingSubjectApiGroup, existingPlacements: props.existingPlacements, existingPlacementRules: props.existingPlacementRules }, void 0))] }, void 0));
}
export function PlacementSelector(props) {
    const resources = useItem();
    const { placementCount, placementRuleCount, placementBindingCount, setShowPlacements, setShowPlacementRules, setShowPlacementBindings, } = props;
    const { update } = useData();
    return (_jsx(DetailsHidden, { children: _jsxs("div", { style: { display: 'flex', flexDirection: 'column', gap: 8 }, children: [_jsx("span", { className: "pf-c-form__label pf-c-form__label-text", children: "How do you want to select clusters?" }, void 0), _jsxs(ToggleGroup, { "aria-label": "Default with single selectable", children: [_jsx(ToggleGroupItem, { text: "New placement", isSelected: placementCount + placementRuleCount === 1, onClick: () => {
                                let newResources = [...resources];
                                newResources = resources
                                    .filter((resource) => resource.kind !== PlacementKind)
                                    .filter((resource) => resource.kind !== PlacementRuleKind)
                                    .filter((resource) => resource.kind !== PlacementBindingKind);
                                if (props.defaultPlacementKind === PlacementKind) {
                                    newResources.push({
                                        apiVersion: PlacementApiVersion,
                                        kind: PlacementKind,
                                        metadata: { name: '', namespace: '' },
                                    });
                                }
                                else {
                                    newResources.push({
                                        ...PlacementRuleType,
                                        metadata: { name: '', namespace: '' },
                                        spec: { clusterSelector: { matchExpressions: [] } },
                                    });
                                }
                                if (props.defaultPlacementKind === PlacementKind) {
                                    newResources.push({
                                        ...PlacementBindingType,
                                        metadata: { name: '', namespace: '' },
                                        placementRef: { apiGroup: PlacementApiGroup, kind: PlacementKind, name: '' },
                                        subjects: [{ apiGroup: props.bindingSubjectApiGroup, kind: props.bindingSubjectKind, name: '' }],
                                    });
                                }
                                else {
                                    newResources.push({
                                        ...PlacementBindingType,
                                        metadata: { name: '', namespace: '' },
                                        placementRef: { apiGroup: PlacementRuleApiGroup, kind: PlacementRuleKind, name: '' },
                                        subjects: [{ apiGroup: props.bindingSubjectApiGroup, kind: props.bindingSubjectKind, name: '' }],
                                    });
                                }
                                update(newResources);
                                setShowPlacementBindings?.(false);
                            } }, void 0), _jsx(ToggleGroupItem, { text: "Existing placement", isSelected: placementCount === 0 && placementRuleCount === 0 && placementBindingCount === 1, onClick: () => {
                                let newResources = [...resources];
                                newResources = resources
                                    .filter((resource) => resource.kind !== PlacementKind)
                                    .filter((resource) => resource.kind !== PlacementRuleKind)
                                    .filter((resource) => resource.kind !== PlacementBindingKind);
                                if (props.defaultPlacementKind === PlacementKind) {
                                    newResources.push({
                                        ...PlacementBindingType,
                                        metadata: { name: '', namespace: '' },
                                        placementRef: { apiGroup: PlacementApiGroup, kind: PlacementKind, name: '' },
                                        subjects: [{ apiGroup: props.bindingSubjectApiGroup, kind: props.bindingSubjectKind, name: '' }],
                                    });
                                }
                                else {
                                    newResources.push({
                                        ...PlacementBindingType,
                                        metadata: { name: '', namespace: '' },
                                        placementRef: { apiGroup: PlacementApiGroup, kind: PlacementRuleKind, name: '' },
                                        subjects: [{ apiGroup: props.bindingSubjectApiGroup, kind: props.bindingSubjectKind, name: '' }],
                                    });
                                }
                                update(newResources);
                                setShowPlacements?.(false);
                                setShowPlacementRules?.(false);
                            } }, void 0), _jsx(ToggleGroupItem, { text: "Do not place", isSelected: placementCount === 0 && placementRuleCount === 0 && placementBindingCount === 0, onClick: () => {
                                let newResources = [...resources];
                                newResources = resources
                                    .filter((resource) => resource.kind !== PlacementKind)
                                    .filter((resource) => resource.kind !== PlacementRuleKind)
                                    .filter((resource) => resource.kind !== PlacementBindingKind);
                                update(newResources);
                                setShowPlacements?.(false);
                                setShowPlacementRules?.(false);
                                setShowPlacementBindings?.(false);
                            } }, void 0)] }, void 0)] }, void 0) }, void 0));
}
//# sourceMappingURL=PlacementSection.js.map
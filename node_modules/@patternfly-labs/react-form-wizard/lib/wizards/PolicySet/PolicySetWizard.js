import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment, useMemo } from 'react';
import { EditMode, ItemSelector, Section, Select, Step, TableSelect, TextArea, TextInput, WizardPage, } from '../../src';
import { useItem } from '../../src/contexts/ItemContext';
import { PlacementBindingKind, PlacementBindingType } from '../common/resources/IPlacementBinding';
import { PlacementRuleApiGroup, PlacementRuleKind, PlacementRuleType } from '../common/resources/IPlacementRule';
import { PolicySetApiGroup, PolicySetKind, PolicySetType } from '../common/resources/IPolicySet';
import { Sync } from '../common/Sync';
import { isValidKubernetesName } from '../common/validation';
import { PlacementSection } from '../Placement/PlacementSection';
export function PolicySetWizard(props) {
    return (_jsxs(WizardPage, { title: props.title, breadcrumb: props.breadcrumb, onSubmit: props.onSubmit, onCancel: props.onCancel, editMode: props.editMode, defaultData: props.resources ?? [
            {
                ...PolicySetType,
                metadata: { name: '', namespace: '' },
                spec: { description: '', policies: [] },
            },
            {
                ...PlacementRuleType,
                metadata: { name: '', namespace: '' },
                spec: { clusterSelector: { matchExpressions: [] } },
            },
            {
                ...PlacementBindingType,
                metadata: { name: '', namespace: '' },
                placementRef: { apiGroup: PlacementRuleApiGroup, kind: PlacementRuleKind, name: '' },
                subjects: [{ apiGroup: PolicySetApiGroup, kind: PolicySetKind, name: '' }],
            },
        ], children: [_jsxs(Step, { label: "Details", id: "details-step", children: [props.editMode !== EditMode.Edit && (_jsxs(Fragment, { children: [_jsx(Sync, { kind: PolicySetKind, path: "metadata.name", prefix: "-placement" }, void 0), _jsx(Sync, { kind: PolicySetKind, path: "metadata.name", prefix: "-placement" }, void 0), _jsx(Sync, { kind: PolicySetKind, path: "metadata.name", targetKind: PlacementBindingKind, targetPath: "subjects.0.name" }, void 0)] }, void 0)), _jsx(Sync, { kind: PolicySetKind, path: "metadata.namespace" }, void 0), _jsx(Section, { label: "Details", children: _jsxs(ItemSelector, { selectKey: "kind", selectValue: PolicySetKind, children: [_jsx(TextInput, { label: "Name", path: "metadata.name", id: "name", required: true, validation: isValidKubernetesName, disabledInEditMode: true }, void 0), _jsx(TextArea, { label: "Description", path: "spec.description" }, void 0), _jsx(Select, { label: "Namespace", path: "metadata.namespace", id: "namespace", required: true, options: props.namespaces, disabledInEditMode: true }, void 0)] }, void 0) }, void 0)] }, void 0), _jsx(Step, { label: "Policies", id: "policies-step", children: _jsx(PoliciesSection, { policies: props.policies }, void 0) }, void 0), _jsx(Step, { label: "Placement", id: "placement-step", children: _jsx(PlacementSection, { existingclusterSetBindings: props.clusterSetBindings, bindingSubjectKind: PolicySetKind, bindingSubjectApiGroup: PolicySetApiGroup, existingPlacements: props.placements, existingPlacementRules: props.placementRules, defaultPlacementKind: PlacementRuleKind }, void 0) }, void 0)] }, void 0));
}
function PoliciesSection(props) {
    const resources = useItem();
    const namespacedPolicies = useMemo(() => {
        if (!resources.find)
            return [];
        const policySet = resources?.find((resource) => resource.kind === PolicySetKind);
        if (!policySet)
            return [];
        const namespace = policySet.metadata?.namespace;
        if (!namespace)
            return [];
        return props.policies.filter((policy) => policy.metadata?.namespace === namespace);
    }, [props.policies, resources]);
    return (_jsx(Section, { label: "Policies", description: "Select the policies you want to add to this set", children: _jsx(ItemSelector, { selectKey: "kind", selectValue: PolicySetKind, children: _jsx(TableSelect, { id: "policies", path: "spec.policies", label: "", columns: [
                    { name: 'Name', cellFn: (policy) => policy.metadata?.name },
                    { name: 'Namespace', cellFn: (policy) => policy.metadata?.namespace },
                ], items: namespacedPolicies, itemToValue: (policy) => policy.metadata?.name, valueMatchesItem: (value, policy) => value === policy.metadata?.name, emptyMessage: "No policies available for selection. Set the namespace to be able to select policies in that namespace." }, void 0) }, void 0) }, void 0));
}
//# sourceMappingURL=PolicySetWizard.js.map
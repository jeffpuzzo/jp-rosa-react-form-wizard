import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Checkbox, KeyValue, Radio, RadioGroup, Section, Select, Step, TextInput, Tile, Tiles, TimeRange, WizardPage, } from '../../src';
export function RosaWizard(props) {
    return (_jsxs(WizardPage, { title: "Create ROSA cluster", defaultData: {}, onSubmit: props.onSubmit, onCancel: props.onCancel, children: [_jsxs(Step, { label: "Account and roles", id: "account", children: [_jsxs(Section, { label: "Account and roles", prompt: "Welcome to the Red Hat OpenShift service on AWS (ROSA)", description: "Red Hat OpenShift Service on AWS provides a model that allows Red Hat to deploy clusters into a customer's existing Amazon Web Service (AWS) account.", children: [_jsx(Select, { id: "account", path: "account", label: "Associated AWS account", options: ['TODO'] }, void 0), _jsx(Select, { id: "role", path: "role", label: "OpenShift Cluster Manager role (ocm-role)", options: ['TODO'] }, void 0)] }, void 0), _jsxs(Section, { label: "Account roles ARNs", description: "The following roles were detected according to the associated account. The ARNs can be edited according to your preferences.", children: [_jsx(TextInput, { id: "installer-role", path: "installerRole", label: "Installer role", required: true }, void 0), _jsx(TextInput, { id: "support-role", path: "supportRole", label: "Support role", required: true }, void 0), _jsx(TextInput, { id: "worker-role", path: "workerRole", label: "Worker role", required: true }, void 0), _jsx(TextInput, { id: "control-plane-role", path: "controlPlaneRole", label: "Control plane role", required: true }, void 0)] }, void 0)] }, void 0), _jsxs(Step, { label: "Cluster settings", id: "cluster-settings", children: [_jsxs(Step, { label: "Details", id: "details", children: [_jsxs(Section, { label: "Cluster details", prompt: "Enter the cluster details", children: [_jsx(TextInput, { id: "cluster-name-role", path: "clusterName", label: "Cluster name", required: true }, void 0), _jsx(Checkbox, { id: "use-roles-prefix", path: "useRolesPrefix", label: "Use operator roles prefix", children: _jsx(TextInput, { id: "roles-prefix", path: "rolesPrefix", label: "Operator roles prefix", required: true, helperText: "Maximum 32 characters." }, void 0) }, void 0), _jsx(Select, { id: "version", path: "version", label: "Version", options: ['TODO'], required: true }, void 0), _jsx(Select, { id: "region", path: "region", label: "Region", options: ['TODO'], required: true }, void 0), _jsxs(RadioGroup, { id: "availability", path: "availability", label: "Availability", children: [_jsx(Radio, { id: "single-zone", value: "single-zone", label: "Single zone" }, void 0), _jsx(Radio, { id: "multi-zone", value: "multi-zone", label: "Multi zone" }, void 0)] }, void 0), _jsx(Checkbox, { id: "monitoring", path: "monitoring", title: "Monitoring", label: "Enable use workload monitoring", helperText: "Monitor you own projects in isolation from Red Hat Site reliability (SRE) platform metrics." }, void 0)] }, void 0), _jsxs(Section, { label: "Encryption", description: "Add additional encryption to your cluster. Note that cloud storage already encrypts storage as rest.", children: [_jsx(Checkbox, { id: "etcd-encryption", path: "etcdEncryption", label: "Enable etcd encryption", helperText: "Add another layer of data security to your cluster." }, void 0), _jsx(Checkbox, { id: "ebs-encryption", path: "ebsEncryption", label: "Encrypt EBS with customer keys", helperText: "Use your own AWS KMS keys to enable encryption of AWS EBS volumes for the cluster." }, void 0)] }, void 0)] }, void 0), _jsx(Step, { label: "Machine pool", id: "machine-pool", children: _jsxs(Section, { label: "Default machine pool", description: "Select a compute node instance type and count your default machine pool.", children: [_jsx(Select, { id: "instance-type", path: "instanceType", label: "Compute node instance type", options: ['TODO'], required: true }, void 0), _jsx(Select, { id: "availability-zones", path: "availabilityZones", label: "Availability zones", options: ['TODO'], required: true }, void 0), _jsxs(Checkbox, { id: "autoscaling", path: "autoscaling", title: "Autoscaling", label: "Enable autoscaling", helperText: "Autoscaling automatically adds and removes worker (compute) nodes from the cluster based on resource requirments.", children: [_jsx(TextInput, { id: "minimum-nodes", path: "minimumNodes", label: "Minimum nodes per zone", required: true }, void 0), _jsx(TextInput, { id: "maximim-nodes", path: "maximumNodes", label: "Maximum nodes per zone", required: true }, void 0)] }, void 0), _jsx(KeyValue, { id: "node-labels", path: "nodeLabels", label: "Extra node labels" }, void 0)] }, void 0) }, void 0)] }, void 0), _jsxs(Step, { label: "Networking", id: "networking", children: [_jsx(Step, { label: "Configuration", id: "configuration", children: _jsxs(Section, { label: "Networking configuration", description: "Configure network access for your cluster.", children: [_jsxs(Checkbox, { id: "vpc", path: "vpc", title: "Virtual Private Cloud (VPC) subnets", label: "Install into an existing Virtual Private Cloud (VPC).", children: [_jsx(TextInput, { id: "existing-vpc-id", path: "existingVpcId", label: "Existing VPC ID", required: true }, void 0), _jsx(Checkbox, { id: "private-link", path: "privateLink", label: "Use a PrivateLink", helperText: "To provide support, Red Hat Site Reliability Engineer (SRE) would connect to the cluster using only AWS PrivateLink endpoints instead of public endpoints. This option cannot be changed after a cluster is created." }, void 0)] }, void 0), _jsxs(RadioGroup, { id: "cluster-privacy", path: "clusterPrivacy", label: "Cluster privacy", children: [_jsx(Radio, { id: "public", value: "public", label: "Public", description: "Access master API endpoint and application routes from the internet." }, void 0), _jsx(Radio, { id: "private", value: "private", label: "Private", description: "Access master API endpoint and application routes from durect private connections only." }, void 0)] }, void 0)] }, void 0) }, void 0), _jsx(Step, { label: "VPC settings", id: "vpc-settings", children: _jsx(Section, { label: "Virtual Private Cloud (VPC) subnets", description: "the subnet list is based on the provided VPC ID. You must select at least 1 subnet from each availability zone.", children: _jsx(Select, { id: "subnets", path: "subnets", label: "Subnets", options: ['TODO'], required: true }, void 0) }, void 0) }, void 0), _jsx(Step, { label: "CIDR ranges", id: "cidr-ranges", children: _jsxs(Section, { label: "CIDR ranges", children: [_jsx(TextInput, { id: "machine-cidr", path: "machineCIDR", label: "Machine CIDR", required: true, helperText: "Range must be private. Maximum subnet mask is /23." }, void 0), _jsx(TextInput, { id: "service-cidr", path: "serviceCIDR", label: "Service CIDR", required: true, helperText: "Range must be private. Maximum subnet mask is /24." }, void 0), _jsx(TextInput, { id: "pod-cidr", path: "podCIDR", label: "Pod CIDR", required: true, helperText: "Range must be private. Maximum subnet mask ust allow at lease 32 nodes." }, void 0), _jsx(TextInput, { id: "host-prefix", path: "hostPrefix", label: "Host prefix", required: true, helperText: "Must be between /23 and /26." }, void 0)] }, void 0) }, void 0)] }, void 0), _jsxs(Step, { label: "Updates", id: "updates", children: [_jsx(Section, { label: "Cluster updates", description: "High and critical security concerns (CVEs) will be patched automatically within 48 hours regardless of your chosen update strategy.", children: _jsxs(RadioGroup, { id: "cluster-update", path: "clusterUpdate", children: [_jsx(Radio, { id: "manual", value: "manual", label: "Manual", description: "Manually schedule the update. If it falls too far behind, it will update automatically beased on version support." }, void 0), _jsxs(Radio, { id: "automatic", value: "automatic", label: "Automatic", description: "Clusters will be automatically updared beased on your defined day and start time when new versions are available.", children: [_jsx(Select, { id: "day", path: "day", label: "Day", options: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Firday', 'Saturday'], required: true }, void 0), _jsx(TimeRange, { id: "time", path: "time", label: "Start time" }, void 0)] }, void 0)] }, void 0) }, void 0), _jsx(Section, { label: "Node draining", description: "You may set a grace period for how long Pod Disruption Budget-protected workloads will be respected during upgrades. After this grace period, any workloads protected by Pod Disruption Budgets that have not been successfully drained from a node will be forcibly evicted.", children: _jsx(Select, { id: "grace-period", path: "gracePeriod", label: "Grace period", options: ['Every hour', 'Every day'], required: true }, void 0) }, void 0)] }, void 0), _jsx(Step, { label: "Provisioning mode", id: "provisioning-mode", children: _jsx(Section, { label: "Provisioning mode", prompt: "Select role creation mode", description: "Choose the prefered mode for creating operator roles and OIDC provider.", children: _jsxs(Tiles, { id: "creation-mode", path: "creationMode", children: [_jsx(Tile, { id: "manual", value: "manual", label: "Manual", description: "Manually schedule the update. If it falls too far behind, it will update automatically beased on version support." }, void 0), _jsx(Tile, { id: "automatic", value: "automatic", label: "Automatic", description: "Clusters will be automatically updared beased on your defined day and start time when new versions are available." }, void 0)] }, void 0) }, void 0) }, void 0)] }, void 0));
}
//# sourceMappingURL=RosaWizard.js.map